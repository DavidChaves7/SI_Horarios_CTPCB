@page "/"
@page "/Login"
@layout CleanLayout

<HeadContent>
    <link rel="stylesheet" href="css/Styles/Style-Login.css" />
</HeadContent>
<PageTitle>Iniciar Sesión - C.T.P. Plan Nacional</PageTitle>

<div class="login-page">
    <div class="login-card">
        <img src="Img/Logos/logo_ctp_plan.png" alt="Logo" class="logo" />
        <h2 class="titleLog">Bienvenido</h2>

        <form data-enhance method="post" @onsubmit="Submit" @formname="formLogin" class="login">
            <AntiforgeryToken />
            <div class="form-group">
                <input type="text" @bind="userName" class="form-control" placeholder="Usuario" required />
            </div>
            <div class="form-group">
                <input type="password" @bind="password" class="form-control" placeholder="Contraseña" required />
            </div>

            <!-- Errores -->
            @* @if (!string.IsNullOrEmpty(Model._Error))
            {
                <div class="alert alert-danger" role="alert" id="divAlerta">
                    @Model._Error
                </div>
            } *@

            <button type="submit" class="btn-login">Iniciar Sesión</button>
        </form>
    </div>
</div>

@code {
    [Inject] INotificationService NotificationService { get; set; } = null!;
    [Inject] NavigationManager nav { get; set; } = null!;
    [Inject] AuthenticationStateProvider authService { get; set; } = null!;
    // [Inject] UserService userService { get; set; } = null!;

    [CascadingParameter]
    public HttpContext httpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    public string? returnUrl { get; set; }

    [SupplyParameterFromForm]
    string? userName { get; set; }
    [SupplyParameterFromForm]
    string? password { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // await storage.DeleteAsync("authUser");
    }

    async Task Submit()
    {
        // Prototipo: redirige directamente
        nav.NavigateTo("MenuPrincipal", true);

        // 🧪 Implementación futura con validación real:
        /*
        var res = await api.Seguridad_AuthenticateUserAsync(new LoginRequest
        {
            CodUsuario = userName?.ToUpper(),
            Password = password
            });

        if (res.Authenticated)
        {
            var currentUser = await authService.GetAuthenticationStateAsync();
            var identity = new ClaimsIdentity(
            new[]
            {
                        new Claim(ClaimTypes.NameIdentifier, userName?.ToUpper()),
                        new Claim(ClaimTypes.Authentication, res.Token),
                },
            CookieAuthenticationDefaults.AuthenticationScheme);

            var newUser = new ClaimsPrincipal(identity);

            await httpContext.SignInAsync(
            CookieAuthenticationDefaults.AuthenticationScheme,
            newUser,
            new AuthenticationProperties
            {
                AllowRefresh = true,
                IsPersistent = true
                });

            currentUser.User.AddIdentity(identity);
            nav.NavigateTo("MenuPrincipal", true);
            }
        else
        {
            await NotificationService.Info("Credenciales Incorrectas", "No se pudo iniciar sesión", opt =>
            {
                opt.IntervalBeforeClose = 3000;
                });
            }
        */
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EquifaxWS
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(Name="EquifaxCr_WebServices_Reportes INFORM - ENRICH - EMPOWERSoap", Namespace="https://webservices.equifax.cr", ConfigurationName="EquifaxWS.EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoap")]
    public interface EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/estudio_personas_fisicas", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> estudio_personas_fisicasAsync(string referencia, string cedula, string usuario, string clave, string usuario_datum);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/Estudio_Personas_Promerica", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> Estudio_Personas_PromericaAsync(string ptipo, string pcedula, string pusuario, string pclave, string pusuario_datum);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/categorias_informacion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> categorias_informacionAsync(string cedula, string usuario, string clave, string categoria);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/estudio_personas_juridicas", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> estudio_personas_juridicasAsync(string referencia, string cedula, string usuario, string clave, string usuario_datum);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/categorias_informacion_juridicas", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> categorias_informacion_juridicasAsync(string cedula_juridica, string usuario, string clave, string categoria);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/EFX_Validar_Usuario", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EFX_Validar_UsuarioAsync(string usuario, string clave, int programa, int plataforma);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/Obtener_UsuarioWS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> Obtener_UsuarioWSAsync(string Usuario, string Clave, int Programa);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/Enviar_Correo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> Enviar_CorreoAsync(string Usuario, string Clave, string Correo_Remitente, string Correos_Destinatarios, string Asunto, string Cuerpo_Correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/Listas_Internacionales", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> Listas_InternacionalesAsync(string Clave, string Nombre1, string Nombre2, string Apellido1, string Apellido2);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/Estudio_360_Fisico", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> Estudio_360_FisicoAsync(string referencia, string Cedula, string Usuario, string Clave, string Usuario_Datum);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/Estudio_Completo_Extranjeros_RW", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> Estudio_Completo_Extranjeros_RWAsync(string referencia, string Cedula, string Usuario, string Clave, string Usuario_Datum);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/obtener_datos_vehiculo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> obtener_datos_vehiculoAsync(string placa, string usuario, string clave, string usuario_datum);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/Estudio_Completo_Extranjeros", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Estudio_Completo_ExtranjerosAsync(string referencia, string identificacion, string tipo_identificacion, string usuario, string clave, string usuario_datum);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://webservices.equifax.cr/Estudio_informacion_NSE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> Estudio_informacion_NSEAsync(string identificacion, string usuario, string clave);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoapChannel : EquifaxWS.EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoapClient : System.ServiceModel.ClientBase<EquifaxWS.EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoap>, EquifaxWS.EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoap
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoapClient.GetBindingForEndpoint(endpointConfiguration), EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public EquifaxCr_WebServices_ReportesINFORMENRICHEMPOWERSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> estudio_personas_fisicasAsync(string referencia, string cedula, string usuario, string clave, string usuario_datum)
        {
            return base.Channel.estudio_personas_fisicasAsync(referencia, cedula, usuario, clave, usuario_datum);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> Estudio_Personas_PromericaAsync(string ptipo, string pcedula, string pusuario, string pclave, string pusuario_datum)
        {
            return base.Channel.Estudio_Personas_PromericaAsync(ptipo, pcedula, pusuario, pclave, pusuario_datum);
        }
        
        public System.Threading.Tasks.Task<string> categorias_informacionAsync(string cedula, string usuario, string clave, string categoria)
        {
            return base.Channel.categorias_informacionAsync(cedula, usuario, clave, categoria);
        }
        
        public System.Threading.Tasks.Task<string> estudio_personas_juridicasAsync(string referencia, string cedula, string usuario, string clave, string usuario_datum)
        {
            return base.Channel.estudio_personas_juridicasAsync(referencia, cedula, usuario, clave, usuario_datum);
        }
        
        public System.Threading.Tasks.Task<string> categorias_informacion_juridicasAsync(string cedula_juridica, string usuario, string clave, string categoria)
        {
            return base.Channel.categorias_informacion_juridicasAsync(cedula_juridica, usuario, clave, categoria);
        }
        
        public System.Threading.Tasks.Task<string> EFX_Validar_UsuarioAsync(string usuario, string clave, int programa, int plataforma)
        {
            return base.Channel.EFX_Validar_UsuarioAsync(usuario, clave, programa, plataforma);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> Obtener_UsuarioWSAsync(string Usuario, string Clave, int Programa)
        {
            return base.Channel.Obtener_UsuarioWSAsync(Usuario, Clave, Programa);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> Enviar_CorreoAsync(string Usuario, string Clave, string Correo_Remitente, string Correos_Destinatarios, string Asunto, string Cuerpo_Correo)
        {
            return base.Channel.Enviar_CorreoAsync(Usuario, Clave, Correo_Remitente, Correos_Destinatarios, Asunto, Cuerpo_Correo);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> Listas_InternacionalesAsync(string Clave, string Nombre1, string Nombre2, string Apellido1, string Apellido2)
        {
            return base.Channel.Listas_InternacionalesAsync(Clave, Nombre1, Nombre2, Apellido1, Apellido2);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> Estudio_360_FisicoAsync(string referencia, string Cedula, string Usuario, string Clave, string Usuario_Datum)
        {
            return base.Channel.Estudio_360_FisicoAsync(referencia, Cedula, Usuario, Clave, Usuario_Datum);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> Estudio_Completo_Extranjeros_RWAsync(string referencia, string Cedula, string Usuario, string Clave, string Usuario_Datum)
        {
            return base.Channel.Estudio_Completo_Extranjeros_RWAsync(referencia, Cedula, Usuario, Clave, Usuario_Datum);
        }
        
        public System.Threading.Tasks.Task<string> obtener_datos_vehiculoAsync(string placa, string usuario, string clave, string usuario_datum)
        {
            return base.Channel.obtener_datos_vehiculoAsync(placa, usuario, clave, usuario_datum);
        }
        
        public System.Threading.Tasks.Task<string> Estudio_Completo_ExtranjerosAsync(string referencia, string identificacion, string tipo_identificacion, string usuario, string clave, string usuario_datum)
        {
            return base.Channel.Estudio_Completo_ExtranjerosAsync(referencia, identificacion, tipo_identificacion, usuario, clave, usuario_datum);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> Estudio_informacion_NSEAsync(string identificacion, string usuario, string clave)
        {
            return base.Channel.Estudio_informacion_NSEAsync(identificacion, usuario, clave);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.EquifaxCr_WebServices_Reportes_x0020_INFORM_x0020___x0020_ENRICH_x0020___x0020_EMPOWERSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.EquifaxCr_WebServices_Reportes_x0020_INFORM_x0020___x0020_ENRICH_x0020___x0020_EMPOWERSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.EquifaxCr_WebServices_Reportes_x0020_INFORM_x0020___x0020_ENRICH_x0020___x0020_EMPOWERSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://webservices.equifax.cr/webservices/efx_consultas.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.EquifaxCr_WebServices_Reportes_x0020_INFORM_x0020___x0020_ENRICH_x0020___x0020_EMPOWERSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://webservices.equifax.cr/webservices/efx_consultas.asmx");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            EquifaxCr_WebServices_Reportes_x0020_INFORM_x0020___x0020_ENRICH_x0020___x0020_EMPOWERSoap,
            
            EquifaxCr_WebServices_Reportes_x0020_INFORM_x0020___x0020_ENRICH_x0020___x0020_EMPOWERSoap12,
        }
    }
}

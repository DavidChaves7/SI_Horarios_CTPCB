@inject SIHAPI api
<Div Class="main-content">

    <LoadingIndicator Visible="@(data is null)">
        <ChildContent>
            <Row>
                <Column ColumnSize="ColumnSize.Is2.OnDesktop.Is12.OnMobile">
                    <Button Class="btn btn-create" Margin="Margin.Is3.FromTop.Is3.FromTop" Clicked="DescargarPlantillaMaterias">Plantilla Excel Materias</Button>
                </Column>
                <Column ColumnSize="ColumnSize.Is2.OnDesktop.Is12.OnMobile">
                    <Button Class="btn btn-edit" Margin="Margin.Is3.FromTop.Is3.FromTop" Clicked="modalSubir!.Open">Importar Excel</Button>
                </Column>
            </Row>
            <br />
            <br />
            <Row>
                <ButtonsExportComponent T="MateriaDto" Data="data" Titulo="Materias" />

            </Row>

            <DataGrid UseInternalEditing="false" Hoverable @bind-SelectedRow="@selecteddata" CommandMode="DataGridCommandMode.ButtonRow" Editable Striped TItem="MateriaDto" Data="data" PageSize="10" PageSizes="[10, 20, 30]" ShowPageSizes
                      Responsive Filterable Sortable SortMode="DataGridSortMode.Multiple" EditMode="DataGridEditMode.Popup" ShowPager PopupTitleTemplate="SetModalTitle" PopupSize="ModalSize.Large"
                      UseValidation RowInserted="InsertNewItem" RowInserting="ValidateEditFields" RowUpdating="ValidateEditFields" RowUpdated="InsertNewItem" RowRemoving="RemovingRow" RowRemoved="DeleteItem">
                <DataGridColumns>
                    @* <DataGridColumn Field="@nameof(MateriaDto.Id_Materia)" Caption="Id" /> *@
                    <DataGridColumn Field="@nameof(MateriaDto.Nombre)" Editable Caption="Materia" />
                    <DataGridColumn Field="@nameof(MateriaDto.Tipo)" Editable Caption="Tipo">
                        <DisplayTemplate>
                            @(context.Tipo.Equals("A") ? "Academica" : "Tecnica")
                        </DisplayTemplate>
                        <EditTemplate>
                            <Select SelectedValue="@((string)context.CellValue)" SelectedValueChanged="@(v => context.CellValue = v)" TValue="object" Style="min-width: 200px;">
                                <SelectItem Value="@("")">Seleccione una opción</SelectItem>
                                <SelectItem Value="@("A")">Académica</SelectItem>
                                <SelectItem Value="@("T")">Técnica</SelectItem>
                            </Select>
                        </EditTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(MateriaDto.Color)" Editable Caption="Color">
                        <DisplayTemplate >
                            <Div style="display: flex; align-items: center; gap: 10px; ">
                                <ColorEdit Color="@context.Color" Style="width: 100%; height:70px;" Disabled />
                               
                            </Div>
                        </DisplayTemplate>
                        <EditTemplate>
                            <ColorPicker Color="@((string)context.CellValue)"
                                         ColorChanged="@(v => context.CellValue = v)"
                                         Style="min-width: 200px;" />

                        </EditTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(MateriaDto.Estado)" Editable Caption="Estado">
                        <DisplayTemplate>
                            <Select SelectedValue="@context.Estado" Disabled TValue="string" Style="min-width: 200px;">
                                <SelectItem Value="@("A")">Activo</SelectItem>
                                <SelectItem Value="@("I")">Inactivo</SelectItem>
                            </Select>
                        </DisplayTemplate>
                        <EditTemplate>
                            <Select SelectedValue="@((string)context.CellValue)" SelectedValueChanged="@(v => context.CellValue = v)" TValue="object" Style="min-width: 200px;">
                                <SelectItem Value="@("")">Seleccione una opción</SelectItem>
                                <SelectItem Value="@("A")">Activo</SelectItem>
                                <SelectItem Value="@("I")">Inactivo</SelectItem>
                            </Select>
                        </EditTemplate>
                    </DataGridColumn>

                </DataGridColumns>
                <ButtonRowTemplate>
                    <Button Class="btn btn-create" Clicked="context.NewCommand.Clicked">Nuevo</Button>
                    <Button Class="btn btn-edit" Disabled="(selecteddata is null)" Clicked="context.EditCommand.Clicked">Editar</Button>
                    <Button Class="btn btn-delete" Disabled="(selecteddata is null)" Clicked="context.DeleteCommand.Clicked">Inactivar</Button>
                </ButtonRowTemplate>
                <NextPageButtonTemplate><Icon Name="IconName.AngleRight" /></NextPageButtonTemplate>
                <PreviousPageButtonTemplate><Icon Name="IconName.AngleLeft" /></PreviousPageButtonTemplate>
                <LastPageButtonTemplate><Icon Name="IconName.AngleRight" /><Icon Name="IconName.AngleRight" /></LastPageButtonTemplate>
                <FirstPageButtonTemplate><Icon Name="IconName.AngleLeft" /><Icon Name="IconName.AngleLeft" /></FirstPageButtonTemplate>
            </DataGrid>


        </ChildContent>
    </LoadingIndicator>
</Div>
<ModalSubirArchivoMaterias OnInsert="CallbackInsertarExcel" @ref="modalSubir"></ModalSubirArchivoMaterias>
<ModalSubirArchivoMaterias @ref="modalSubir"></ModalSubirArchivoMaterias>


@code {


    private string accessCategory { get; set; } = "";


    IEnumerable<MateriaDto>? data { get; set; } = new List<MateriaDto>();

    private MateriaDto? selecteddata;

    ModalSubirArchivoMaterias? modalSubir;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            data = await api.Mantenimientos_GetAllMateriasAsync();

            StateHasChanged();
        }
    }

    RenderFragment SetModalTitle(PopupTitleContext<MateriaDto> context)
    {
        var title = context.EditState == DataGridEditState.New ? "Nueva" : "Editar";
        return (__builder) =>
        {
            <Span>
                @($"{title} Materias")
            </Span>
        };
    }

    async Task InsertNewItem(SavedRowItem<MateriaDto, Dictionary<string, object>> item)
    {
        try
        {


            var errors = item.NewItem.ValidateObjectFields();
            if (!string.IsNullOrEmpty(errors))
            {
                await Task.FromResult(MessageService.Info(errors, "Datos requeridos faltantes"));
            }
            else
            {
                await api.Mantenimientos_AddUpdateMateriasAsync(item.NewItem);
                data = await api.Mantenimientos_GetAllMateriasAsync();
            }
        }
        catch (Exception ex)
        {

        }
    }

    Task ValidateEditFields(CancellableRowChange<MateriaDto, Dictionary<string, object>> item)
    {

        var errors = item.NewItem.ValidateObjectFields();
        if (!string.IsNullOrEmpty(errors))
        {
            item.Cancel = true;
            return MessageService.Info(errors, "Datos requeridos faltantes");
        }
        else
        {
            return Task.CompletedTask;
        }
    }

    async Task DeleteItem(MateriaDto item)
    {
        await api.Mantenimientos_DeleteMateriasAsync(item);
        data = await api.Mantenimientos_GetAllMateriasAsync();
        //data = data.Where(x => x.Id_Materia != item.Id_Materia);
    }

    async Task RemovingRow(CancellableRowChange<MateriaDto> item)
    {
        var delete = await MessageService.Confirm($"Está seguro de inactivar la Mataria {item.OldItem.Nombre}?", "Eliminar Materia", opt =>
        {
            // opt.MessageIcon = Icon
        });
        if (!delete)
        {
            item.Cancel = true;
        }
    }

    private async Task DescargarPlantillaMaterias()
    {
        try
        {
            using (var libro = new XLWorkbook())
            {
                IXLWorksheet hoja = libro.Worksheets.Add("Resumen (Masivo)");

                hoja.Columns().Width = 30;
                hoja.Cell(1, 1).Value = "Nombre";
                hoja.Cell(1, 2).Value = "Tipo (A/T)";


                for (int col = 1; col <= 2; col++)
                {
                    var celda = hoja.Cell(1, col);
                    celda.Style.Font.Bold = true;
                    celda.Style.Font.FontSize = 14;
                    celda.Style.Fill.BackgroundColor = XLColor.FromHtml("#C6EFCE");
                }

                using (var memoria = new MemoryStream())
                {
                    libro.SaveAs(memoria);
                    var nombreExcel = string.Concat("Plantilla Materias", ".xlsx");

                    await JS.InvokeAsync<object>(
                        "saveAsFile",
                        nombreExcel,
                        Convert.ToBase64String(memoria.ToArray())
                    );
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    async Task CallbackInsertarExcel()
    {
        data = await api.Mantenimientos_GetAllMateriasAsync();
        StateHasChanged();
        await Task.FromResult(MessageService.Success("Archivo de materias subido correctamente, refresque la pantalla", "Archivo Procesado Correctamente"));
    }
}

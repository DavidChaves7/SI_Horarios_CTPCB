@inject SIHAPI api
<Div Class="main-content">
    <LoadingIndicator Visible="@(data is null)">
        <ChildContent>

            <ButtonsExportComponent T="SeguridadDto" Data="data" Titulo="Seguridad" />
            <DataGrid UseInternalEditing="false" Hoverable @bind-SelectedRow="@selectedData" CommandMode="DataGridCommandMode.ButtonRow" Editable Striped TItem="SeguridadDto" Data="data" PageSize="10" PageSizes="[10, 20, 30]" ShowPageSizes
                      Responsive Filterable Sortable SortMode="DataGridSortMode.Multiple" EditMode="DataGridEditMode.Popup" ShowPager PopupTitleTemplate="SetModalTitle" PopupSize="ModalSize.Large"
                      UseValidation RowInserted="InsertNewItem" RowInserting="ValidateEditFields" RowUpdating="ValidateEditFields" RowUpdated="InsertNewItem" RowRemoving="RemovingRow" RowRemoved="DeleteItem">
                <DataGridColumns>
                    <DataGridColumn Field="@nameof(SeguridadDto.Cedula)" Editable Caption="Cedula" />
                    <DataGridColumn Field="@nameof(SeguridadDto.Correo)" Editable Caption="Correo" />
                    <DataGridColumn Field="@nameof(SeguridadDto.Estado)" Editable Caption="Estado">
                        <DisplayTemplate>
                            <Select SelectedValue="@context.Estado" Disabled TValue="string" Style="min-width: 200px;">
                                <SelectItem Value="@("A")">Activo</SelectItem>
                                <SelectItem Value="@("I")">Inactivo</SelectItem>
                            </Select>
                        </DisplayTemplate>
                        <EditTemplate>
                            <Select SelectedValue="@((string)context.CellValue)" SelectedValueChanged="@(v => context.CellValue = v)" TValue="object" Style="min-width: 200px;">
                                <SelectItem Value="@("")">Seleccione una opción</SelectItem>
                                <SelectItem Value="@("A")">Activo</SelectItem>
                                <SelectItem Value="@("I")">Inactivo</SelectItem>
                            </Select>
                        </EditTemplate>
                    </DataGridColumn>
                    </DataGridColumns>
                <ButtonRowTemplate>
                    <Button Class="btn btn-create" Clicked="context.NewCommand.Clicked">Nuevo</Button>
                    <Button Class="btn btn-delete" Disabled="(selectedData is null)" Clicked="context.DeleteCommand.Clicked">Cambiar Estado</Button>
                </ButtonRowTemplate>
                <NextPageButtonTemplate><Icon Name="IconName.AngleRight" /></NextPageButtonTemplate>
                <PreviousPageButtonTemplate><Icon Name="IconName.AngleLeft" /></PreviousPageButtonTemplate>
                <LastPageButtonTemplate><Icon Name="IconName.AngleRight" /><Icon Name="IconName.AngleRight" /></LastPageButtonTemplate>
                <FirstPageButtonTemplate><Icon Name="IconName.AngleLeft" /><Icon Name="IconName.AngleLeft" /></FirstPageButtonTemplate>
            </DataGrid>

        </ChildContent>
    </LoadingIndicator>
</Div>


@code {

    private string accessCategory { get; set; } = "";
    

    IEnumerable<SeguridadDto>? data { get; set; } = new List<SeguridadDto>();

    private SeguridadDto? selectedData;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {

            // #region Seguridad

            // var httpContext = HttpContextAccessor.HttpContext;
            // var userName = "";
            // if (httpContext != null)
            // {
            //     var user = httpContext.User;
            //     userName = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            // }


            // string securityResult = await api.Seguridad_ValidateAccessAsync(new VerificaPermisoRequest
            // {
            //     PCodAccion = "BCCR_PARAM_GENERALES",
            //     PCodCompania = "0001",
            //     PCodModulo = "CPC",
            //     PCodUsuario = userName
            // });
            // if (securityResult.ToUpper().Contains("ERROR"))
            // {
            //     await Task.FromResult(MessageService.Error(securityResult, "Error al validar acceso"));
            // }
            // else
            // {
            //     accessCategory = securityResult;
            // }

            // #endregion
            //data = await api.Mantenimientos_GetAllEjemploMantAsync();
            data = await api.Mantenimientos_GetAllSeguridadsAsync();

            StateHasChanged();
        }
    }

    RenderFragment SetModalTitle(PopupTitleContext<SeguridadDto> context)
    {
        var title = context.EditState == DataGridEditState.New ? "Nuevo" : "Editar";
        return (__builder) =>
        {
            <Span>
                @($"{title} Acceso")
            </Span>
        };
    }

    async Task InsertNewItem(SavedRowItem<SeguridadDto, Dictionary<string, object>> item)
    {
        try
        {


            var errors = item.NewItem.ValidateObjectFields();
            if (!string.IsNullOrEmpty(errors))
            {
                await Task.FromResult(MessageService.Info(errors, "Datos requeridos faltantes"));
            }
            else
            {
                await api.Mantenimientos_AddUpdateSeguridadsAsync(item.NewItem);
                data = await api.Mantenimientos_GetAllSeguridadsAsync();
            }
        }
        catch (Exception ex)
        {

        }
    }

    Task ValidateEditFields(CancellableRowChange<SeguridadDto, Dictionary<string, object>> item)
    {

        var errors = item.NewItem.ValidateObjectFields();
        if (!string.IsNullOrEmpty(errors))
        {
            item.Cancel = true;
            return MessageService.Info(errors, "Datos requeridos faltantes");
        }
        else
        {
            return Task.CompletedTask;
        }
    }

    async Task DeleteItem(SeguridadDto item)
    {
        await api.Mantenimientos_EnableDisableSeguridadsAsync(item);
        data = await api.Mantenimientos_GetAllSeguridadsAsync();
    }

    async Task RemovingRow(CancellableRowChange<SeguridadDto> item)
    {
        var delete = await MessageService.Confirm($"Está seguro de inactivar el Usuario: {item.OldItem.Id_Usuario}?", "Inactivar Usuario", opt =>
        {
            // opt.MessageIcon = Icon
        });
        if (!delete)
        {
            item.Cancel = true;
        }
    }
}

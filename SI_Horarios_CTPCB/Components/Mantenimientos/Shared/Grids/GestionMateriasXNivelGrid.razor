@inject SIHAPI api
<Div Class="main-content">

    <LoadingIndicator Visible="@(data is null)">
        <ChildContent>
            @* <Row>
                <Column ColumnSize="ColumnSize.Is2">
                    <Button Class="btn btn-create" Margin="Margin.Is3.FromTop.Is3.FromTop" Clicked="DescargarPlantillaMaterias">Plantilla Excel Materias</Button>
                </Column>
                <Column ColumnSize="ColumnSize.Is2">
                    <Button Class="btn btn-edit" Margin="Margin.Is3.FromTop.Is3.FromTop" Clicked="modalSubir.Open">Importar Excel</Button>
                </Column>
            </Row> 
            <br />
            <br />*@
            <Row>
                <ButtonsExportComponent T="MateriaXNivelDto" Data="data" Titulo="Materias por Nivel Academico" />

            </Row>

            <DataGrid UseInternalEditing="false" Hoverable @bind-SelectedRow="@selecteddata" CommandMode="DataGridCommandMode.ButtonRow" Editable Striped TItem="MateriaXNivelDto" Data="data" PageSize="10" PageSizes="[10, 20, 30]" ShowPageSizes
                      Responsive Filterable Sortable SortMode="DataGridSortMode.Multiple" EditMode="DataGridEditMode.Popup" ShowPager PopupTitleTemplate="SetModalTitle" PopupSize="ModalSize.Large"
                      UseValidation RowInserted="InsertNewItem" RowInserting="ValidateEditFields" RowUpdating="ValidateEditFields" RowUpdated="InsertNewItem" RowRemoving="RemovingRow" RowRemoved="DeleteItem">
                <DataGridColumns>
                    @* <DataGridColumn Field="@nameof(MateriaXNivelDto.Id_Materia)" Caption="Id" /> *@
                    <DataGridColumn Field="@nameof(MateriaXNivelDto.Desc_Materia)" Editable Caption="Materia" />
                    <DataGridColumn Field="@nameof(MateriaXNivelDto.Desc_Nivel_Academico)" Editable Caption="Nivel Academico">
                        <EditTemplate>
                            <Select SelectedValue="@((string)context.CellValue)" SelectedValueChanged="@(v => context.CellValue = v)" TValue="string" Style="min-width: 200px;">
                                <SelectItem Value="@("")">Seleccione una opción</SelectItem>
                                @foreach (var i in dataNivelAcademico ?? new List<NivelAcademicoDto>() )
                                {
                                    <SelectItem Value="@(i.Id_Nivel_Academico)">@i.Nombre</SelectItem>
                                }
                            </Select>
                        </EditTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(MateriaXNivelDto.Prioridad)" Editable Caption="Prioridad">

                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(MateriaXNivelDto.Carga_Horaria)" Editable Caption="Carga Horaria" />
                    <DataGridColumn Field="@nameof(MateriaXNivelDto.Estado)" Editable Caption="Estado">
                        <DisplayTemplate>
                            <Select SelectedValue="@context.Estado" Disabled TValue="string" Style="min-width: 200px;">
                                <SelectItem Value="@("A")">Activo</SelectItem>
                                <SelectItem Value="@("I")">Inactivo</SelectItem>
                            </Select> 
                        </DisplayTemplate>
                        <EditTemplate>
                            <Select SelectedValue="@((string)context.CellValue)" SelectedValueChanged="@(v => context.CellValue = v)" TValue="object" Style="min-width: 200px;">
                                <SelectItem Value="@("")">Seleccione una opción</SelectItem>
                                <SelectItem Value="@("A")">Activo</SelectItem>
                                <SelectItem Value="@("I")">Inactivo</SelectItem>
                            </Select> 
                        </EditTemplate>
                    </DataGridColumn> 

                </DataGridColumns>
                <ButtonRowTemplate>
                    <Button Class="btn btn-create" Clicked="context.NewCommand.Clicked">Nuevo</Button>
                    <Button Class="btn btn-edit" Disabled="(selecteddata is null)" Clicked="context.EditCommand.Clicked">Editar</Button>
                    <Button Class="btn btn-delete" Disabled="(selecteddata is null)" Clicked="context.DeleteCommand.Clicked">Eliminar</Button>
                </ButtonRowTemplate>
                <NextPageButtonTemplate><Icon Name="IconName.AngleRight" /></NextPageButtonTemplate>
                <PreviousPageButtonTemplate><Icon Name="IconName.AngleLeft" /></PreviousPageButtonTemplate>
                <LastPageButtonTemplate><Icon Name="IconName.AngleRight" /><Icon Name="IconName.AngleRight" /></LastPageButtonTemplate>
                <FirstPageButtonTemplate><Icon Name="IconName.AngleLeft" /><Icon Name="IconName.AngleLeft" /></FirstPageButtonTemplate>
            </DataGrid>


        </ChildContent>
    </LoadingIndicator>
</Div>


@code {


    private string accessCategory { get; set; } = "";


    IEnumerable<MateriaXNivelDto>? data { get; set; } = new List<MateriaXNivelDto>();
    IEnumerable<NivelAcademicoDto>? dataNivelAcademico { get; set; } = new List<NivelAcademicoDto>();

    private MateriaXNivelDto? selecteddata;

    private Snackbar? snackbarPrimary;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {

            // #region Seguridad

            // var httpContext = HttpContextAccessor.HttpContext;
            // var userName = "";
            // if (httpContext != null)
            // {
            //     var user = httpContext.User;
            //     userName = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            // }


            // string securityResult = await api.Seguridad_ValidateAccessAsync(new VerificaPermisoRequest
            // {
            //     PCodAccion = "BCCR_PARAM_GENERALES",
            //     PCodCompania = "0001",
            //     PCodModulo = "CPC",
            //     PCodUsuario = userName
            // });
            // if (securityResult.ToUpper().Contains("ERROR"))
            // {
            //     await Task.FromResult(MessageService.Error(securityResult, "Error al validar acceso"));
            // }
            // else
            // {
            //     accessCategory = securityResult;
            // }

            // #endregion
            data = await api.Mantenimientos_GetAllMateriaXNivelAsync();

            var resNivelAcademico = await api.Mantenimientos_GetAllNivelAcademicoAsync();
            dataNivelAcademico = resNivelAcademico.Where(x => x.Estado.Equals("A"));
            StateHasChanged();
        }
    }

    RenderFragment SetModalTitle(PopupTitleContext<MateriaXNivelDto> context)
    {
        var title = context.EditState == DataGridEditState.New ? "Nueva" : "Editar";
        return (__builder) =>
        {
            <Span>
                @($"{title} Materia por Nivel Academico")
            </Span>
        };
    }

    async Task InsertNewItem(SavedRowItem<MateriaXNivelDto, Dictionary<string, object>> item)
    {
        try
        {


            var errors = item.NewItem.ValidateObjectFields();
            if (!string.IsNullOrEmpty(errors))
            {
                await Task.FromResult(MessageService.Info(errors, "Datos requeridos faltantes"));
            }
            else
            {
                await api.Mantenimientos_AddUpdateMateriaXNivelAsync(item.NewItem);
                data = await api.Mantenimientos_GetAllMateriaXNivelAsync();
            }
        }
        catch (Exception ex)
        {

        }
    }

    Task ValidateEditFields(CancellableRowChange<MateriaXNivelDto, Dictionary<string, object>> item)
    {

        var errors = item.NewItem.ValidateObjectFields();
        if (!string.IsNullOrEmpty(errors))
        {
            item.Cancel = true;
            return MessageService.Info(errors, "Datos requeridos faltantes");
        }
        else
        {
            return Task.CompletedTask;
        }
    }

    async Task DeleteItem(MateriaXNivelDto item)
    {
        await api.Mantenimientos_DeleteMateriaXNivelAsync(item);
        data = await api.Mantenimientos_GetAllMateriaXNivelAsync();
    }

    async Task RemovingRow(CancellableRowChange<MateriaXNivelDto> item)
    {
        var delete = await MessageService.Confirm($"Está seguro de eliminar la Materia {item.OldItem.Desc_Materia} del Nivel {item.OldItem.Desc_Nivel_Academico}?", "Eliminar Materia", opt =>
        {
            // opt.MessageIcon = Icon
        });
        if (!delete)
        {
            item.Cancel = true;
        }
    }


}

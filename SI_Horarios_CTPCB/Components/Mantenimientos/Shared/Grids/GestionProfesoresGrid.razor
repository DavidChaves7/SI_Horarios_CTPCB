@inject SIHAPI api
<Div Class="main-content">
    <LoadingIndicator Visible="@(data is null)">
        <ChildContent>
            <Button Class="btn btn-create" Margin="Margin.Is3.FromTop.Is3.FromTop" Clicked="modalSubir.Open">Importar Archivo</Button>
            <br />
            <br />
            <Row>
                <ButtonsExportComponent T="EjemploMantDto" Data="data" Titulo="Profesores" />
            </Row>

            <DataGrid UseInternalEditing="false" Hoverable @bind-SelectedRow="@selectedData" CommandMode="DataGridCommandMode.ButtonRow" Editable Striped TItem="EjemploMantDto" Data="data" PageSize="10" PageSizes="[10, 20, 30]" ShowPageSizes
                      Responsive Filterable Sortable SortMode="DataGridSortMode.Multiple" EditMode="DataGridEditMode.Popup" ShowPager PopupTitleTemplate="SetModalTitle" PopupSize="ModalSize.Large"
                      UseValidation RowInserted="InsertNewItem" RowInserting="ValidateEditFields" RowUpdating="ValidateEditFields" RowUpdated="InsertNewItem" RowRemoving="RemovingRow" RowRemoved="DeleteItem">
                <DataGridColumns>
                    @* <DataGridColumn Field="@nameof(CatalogCCSSDto.CoD_RUBRO)" Editable Caption="Código Rubro">
                        <EditTemplate>
                            <TextEdit Text="@((string)context.CellValue)" TextChanged="@( v => context.CellValue = v)" Disabled="@(!string.IsNullOrEmpty(context.Item.CoD_RUBRO))">
                                <Feedback>
                                    <ValidationError />
                                    <ValidationNone />
                                </Feedback>
                            </TextEdit>
                        </EditTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(CatalogCCSSDto.DesC_RUBRO)" Editable Caption="Descripción"></DataGridColumn>
                    <DataGridColumn Field="@nameof(CatalogCCSSDto.PorC_RUBRO)" Editable Caption="Porcentaje">
                        <DisplayTemplate>
                            <TextEdit ReadOnly Text="@(Convert.ToDouble(context.PorC_RUBRO).ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("en-US")))"></TextEdit>
                        </DisplayTemplate>
                    </DataGridColumn> *@
                    <DataGridColumn Field="@nameof(EjemploMantDto.Id)" Editable Caption="Cedula" />
                    <DataGridColumn Field="@nameof(EjemploMantDto.Descripcion)" Editable Caption="Nombre" />
                    <DataGridColumn Field="@nameof(EjemploMantDto.Descripcion)" Editable Caption="Apellido" />
                    <DataGridColumn Field="@nameof(EjemploMantDto.Test)" Editable Caption="Correo" />
                    <DataGridColumn Field="@nameof(EjemploMantDto.Test)" Editable Caption="Telefono" />
                    <DataGridColumn Field="@nameof(EjemploMantDto.Test)" Editable Caption="Carga Horaria" />
                    <DataGridColumn Field="@nameof(EjemploMantDto.Test)" Caption="Restricciones">
                        <DisplayTemplate>
                            <Button Class="btn btn-create" Clicked="() => modalRestric.Open()">Restricciones</Button>
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGridColumns>
                <ButtonRowTemplate>

                    <Button Class="btn btn-create" Clicked="context.NewCommand.Clicked">Nuevo</Button>
                    <Button Class="btn btn-edit" Disabled="(selectedData is null)" Clicked="context.EditCommand.Clicked">Editar</Button>
                    <Button Class="btn btn-delete" Disabled="(selectedData is null)" Clicked="context.DeleteCommand.Clicked">Eliminar</Button>

                </ButtonRowTemplate>
            </DataGrid>

        </ChildContent>
    </LoadingIndicator>
</Div>
<ModalSubirArchivo @ref="modalSubir"></ModalSubirArchivo>
<ModalRestriccionHoraria @ref="modalRestric"></ModalRestriccionHoraria>
@code {

    ModalSubirArchivo? modalSubir;
    ModalRestriccionHoraria? modalRestric;
    private string accessCategory { get; set; } = "";
    

    IEnumerable<EjemploMantDto>? data { get; set; } = new List<EjemploMantDto>();

    private EjemploMantDto? selectedData;

    private Snackbar? snackbarPrimary;
    


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {

            // #region Seguridad

            // var httpContext = HttpContextAccessor.HttpContext;
            // var userName = "";
            // if (httpContext != null)
            // {
            //     var user = httpContext.User;
            //     userName = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            // }


            // string securityResult = await api.Seguridad_ValidateAccessAsync(new VerificaPermisoRequest
            // {
            //     PCodAccion = "BCCR_PARAM_GENERALES",
            //     PCodCompania = "0001",
            //     PCodModulo = "CPC",
            //     PCodUsuario = userName
            // });
            // if (securityResult.ToUpper().Contains("ERROR"))
            // {
            //     await Task.FromResult(MessageService.Error(securityResult, "Error al validar acceso"));
            // }
            // else
            // {
            //     accessCategory = securityResult;
            // }

            // #endregion
            //data = await api.Mantenimientos_GetAllEjemploMantAsync();
            data = new List<EjemploMantDto>
            {
                new EjemploMantDto
                {
                    Id = 1,
                    Descripcion = "Denis",
                    Test = "denisca@gmail.com"
                },
                new EjemploMantDto
                {
                    Id = 2,
                    Descripcion = "Juan",
                    Test = "juanperez@gmail.com"
                }
            };
            StateHasChanged();
        }
    }

    RenderFragment SetModalTitle(PopupTitleContext<EjemploMantDto> context)
    {
        var title = context.EditState == DataGridEditState.New ? "Nuevo" : "Editar";
        return (__builder) =>
        {
            <Span>
                @($"{title} Profesor")
            </Span>
        };
    }

    async Task InsertNewItem(SavedRowItem<EjemploMantDto, Dictionary<string, object>> item)
    {
        try
        {


            var errors = item.NewItem.ValidateObjectFields();
            if (!string.IsNullOrEmpty(errors))
            {
                await Task.FromResult(MessageService.Info(errors, "Datos requeridos faltantes"));
            }
            else
            {
                //await api.Parameters_AddUpdateParametersBCCRsAsync(item.NewItem);
                //data = await api.Mantenimientos_GetAllEjemploMantAsync();
                data.Append(item.NewItem);
            }
        }
        catch (Exception ex)
        {

        }
    }

    Task ValidateEditFields(CancellableRowChange<EjemploMantDto, Dictionary<string, object>> item)
    {

        var errors = item.NewItem.ValidateObjectFields();
        if (!string.IsNullOrEmpty(errors))
        {
            item.Cancel = true;
            return MessageService.Info(errors, "Datos requeridos faltantes");
        }
        else
        {
            return Task.CompletedTask;
        }
    }

    async Task DeleteItem(EjemploMantDto item)
    {
        //await api.Parameters_DeleteParametersBCCRAsync(item);
        //data = await api.Mantenimientos_GetAllEjemploMantAsync();
        data = data.Where(x => x.Id != item.Id);
    }

    async Task RemovingRow(CancellableRowChange<EjemploMantDto> item)
    {
        var delete = await MessageService.Confirm($"Está seguro de eliminar el Parámetro {item.OldItem.Id}?", "Eliminar Parámetro", opt =>
        {
            // opt.MessageIcon = Icon
        });
        if (!delete)
        {
            item.Cancel = true;
        }
    }
}

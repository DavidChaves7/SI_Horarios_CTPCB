
@inject SIHAPI api
<Div Class="main-content">
    <LoadingIndicator Visible="@(data is null)">
        <ChildContent>
            <Row>
                <Column ColumnSize="ColumnSize.Is2">
                    <Button Class="btn btn-create" Margin="Margin.Is3.FromTop.Is3.FromTop" Clicked="DescargarPlantillaProfesores">Plantilla Excel Profesores</Button>
                </Column>
                <Column ColumnSize="ColumnSize.Is2">
                    <Button Class="btn btn-edit" Margin="Margin.Is3.FromTop.Is3.FromTop" Clicked="modalSubir.Open">Importar Excel</Button>
                </Column>
            </Row>
            <br />
            <br />
            <Row>
                <ButtonsExportComponent T="ProfesorDto" Data="data" Titulo="Profesores" />
            </Row>

            @* PageSizes="[10, 20, 30]" ShowPageSizes *@
            <DataGrid UseInternalEditing="false" Hoverable @bind-SelectedRow="@selectedData" CommandMode="DataGridCommandMode.ButtonRow" Editable Striped TItem="ProfesorDto" Data="data" PageSize="10" 
                      Responsive Filterable Sortable SortMode="DataGridSortMode.Multiple" EditMode="DataGridEditMode.Popup" ShowPager PopupTitleTemplate="SetModalTitle" PopupSize="ModalSize.Large"
                      UseValidation RowInserted="InsertNewItem" RowInserting="ValidateEditFields" RowUpdating="ValidateEditFields" RowUpdated="InsertNewItem" RowRemoving="RemovingRow" RowRemoved="DeleteItem">
                <DataGridColumns>
                    <DataGridColumn Field="@nameof(ProfesorDto.Id_Profesor)" Caption="Id profesor" />
                    <DataGridColumn Field="@nameof(ProfesorDto.Cedula)" Editable Caption="Cédula">
                        <EditTemplate>
                            <TextEdit Text="@((string)context.CellValue)" TextChanged="@(v => context.CellValue = v)" Disabled="@(!string.IsNullOrEmpty(context.Item.Cedula))">
                                <Feedback>
                                    <ValidationError />
                                    <ValidationNone />
                                </Feedback>
                            </TextEdit>
                        </EditTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(ProfesorDto.Nombre)" Editable Caption="Nombres" />
                    <DataGridColumn Field="@nameof(ProfesorDto.Apellido)" Editable Caption="Apellidos" />
                    <DataGridColumn Field="@nameof(ProfesorDto.Correo)" Editable Caption="Correo" />
                    <DataGridColumn Field="@nameof(ProfesorDto.Telefono)" Editable Caption="Telefono" />
                    <DataGridColumn Field="@nameof(ProfesorDto.Carga_Horaria)" Editable Caption="Carga Horaria" />
                    <DataGridColumn Field="@nameof(ProfesorDto.Estado)" Editable Caption="Estado">
                        <DisplayTemplate>
                            <Select SelectedValue="@context.Estado" Disabled TValue="string" Style="min-width: 200px;">
                                <SelectItem Value="@("A")">Activo</SelectItem>
                                <SelectItem Value="@("I")">Inactivo</SelectItem>
                            </Select>
                        </DisplayTemplate>
                        <EditTemplate>
                            <Select SelectedValue="@((string)context.CellValue)" SelectedValueChanged="@( v => context.CellValue = v)" TValue="object" Style="min-width: 200px;">
                                <SelectItem Value="@("")">Seleccione una opción</SelectItem>
                                <SelectItem Value="@("A")">Activo</SelectItem>
                                <SelectItem Value="@("I")">Inactivo</SelectItem>
                            </Select>
                        </EditTemplate>
                    </DataGridColumn>
                    <DataGridColumn Caption="Restricciones">
                        <DisplayTemplate>
                            <Button Class="btn btn-create" Clicked="() => modalRestric.Open()">Restricciones</Button>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn Caption="Materias">
                        <DisplayTemplate>
                            <Button Class="btn btn-edit" Clicked="() => modalProfesor_X_Materia.Open()">Materias</Button>
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGridColumns>
                <ButtonRowTemplate>
                    <Button Class="btn btn-create" Clicked="context.NewCommand.Clicked">Nuevo</Button>
                    <Button Class="btn btn-edit" Disabled="(selectedData is null)" Clicked="context.EditCommand.Clicked">Editar</Button>
                    <Button Class="btn btn-delete" Disabled="(selectedData is null)" Clicked="context.DeleteCommand.Clicked">Inactivar</Button>
                </ButtonRowTemplate>
                <NextPageButtonTemplate><Icon Name="IconName.AngleRight" /></NextPageButtonTemplate>
                <PreviousPageButtonTemplate><Icon Name="IconName.AngleLeft" /></PreviousPageButtonTemplate>
                <LastPageButtonTemplate><Icon Name="IconName.AngleRight" /><Icon Name="IconName.AngleRight" /></LastPageButtonTemplate>
                <FirstPageButtonTemplate><Icon Name="IconName.AngleLeft" /><Icon Name="IconName.AngleLeft" /></FirstPageButtonTemplate>
            </DataGrid>

        </ChildContent>
    </LoadingIndicator>
</Div>
<ModalSubirArchivoProfesores OnInsert="CallbackInsertarExcel" @ref="modalSubir"></ModalSubirArchivoProfesores>
<ModalProfesor_X_Materia @ref="modalProfesor_X_Materia"></ModalProfesor_X_Materia>
<ModalRestriccionHoraria @ref="modalRestric"></ModalRestriccionHoraria>
@code {

    ModalSubirArchivoProfesores? modalSubir;
    ModalRestriccionHoraria? modalRestric;
    ModalProfesor_X_Materia? modalProfesor_X_Materia;
    private string accessCategory { get; set; } = "";
    
    IEnumerable<ProfesorDto>? data { get; set; } = new List<ProfesorDto>();

    private ProfesorDto? selectedData;

    private Snackbar? snackbarPrimary;
    


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {

            data = await api.Mantenimientos_GetAllProfesorAsync();
            
            StateHasChanged();
        }
    }

    RenderFragment SetModalTitle(PopupTitleContext<ProfesorDto> context)
    {
        var title = context.EditState == DataGridEditState.New ? "Nuevo" : "Editar";
        return (__builder) =>
        {
            <Span>
                @($"{title} Profesor")
            </Span>
        };
    }

    async Task InsertNewItem(SavedRowItem<ProfesorDto, Dictionary<string, object>> item)
    {
        try
        {
            var errors = item.NewItem.ValidateObjectFields();
            if (!string.IsNullOrEmpty(errors))
            {
                await Task.FromResult(MessageService.Info(errors, "Datos requeridos faltantes"));
            }
            else
            {
                await api.Mantenimientos_AddUpdateProfesorAsync(item.NewItem);
                data = await api.Mantenimientos_GetAllProfesorAsync();
            }
        }
        catch (Exception ex)
        {

        }
    }

    Task ValidateEditFields(CancellableRowChange<ProfesorDto, Dictionary<string, object>> item)
    {

        var errors = item.NewItem.ValidateObjectFields();
        if (!string.IsNullOrEmpty(errors))
        {
            item.Cancel = true;
            return MessageService.Info(errors, "Datos requeridos faltantes");
        }
        else
        {
            return Task.CompletedTask;
        }
    }

    async Task DeleteItem(ProfesorDto item)
    {
        await api.Mantenimientos_DeleteProfesorAsync(item);
        data = await api.Mantenimientos_GetAllProfesorAsync();

    }

    async Task RemovingRow(CancellableRowChange<ProfesorDto> item)
    {
        var delete = await MessageService.Confirm($"Está seguro de inactivar al Profesor: {item.OldItem.Nombre} {item.OldItem.Apellido}?", "Inactivar Profesor", opt =>
        {
            // opt.MessageIcon = Icon
        });
        if (!delete)
        {
            item.Cancel = true;
        }
    }

    private async Task DescargarPlantillaProfesores()
    {
        try
        {
            using (var libro = new XLWorkbook())
            {
                IXLWorksheet hoja = libro.Worksheets.Add("Resumen (Masivo)");

                hoja.Columns().Width = 30;
                hoja.Cell(1, 1).Value = "Cedula Profesor";
                hoja.Cell(1, 2).Value = "Nombres";
                hoja.Cell(1, 3).Value = "Apellidos";
                hoja.Cell(1, 4).Value = "Correo";
                hoja.Cell(1, 5).Value = "Telefono";
                hoja.Cell(1, 6).Value = "Carga Horaria";

                for (int col = 1; col <= 6; col++)
                {
                    var celda = hoja.Cell(1, col);
                    celda.Style.Font.Bold = true;
                    celda.Style.Font.FontSize = 14;
                    celda.Style.Fill.BackgroundColor = XLColor.FromHtml("#C6EFCE");
                }

                using (var memoria = new MemoryStream())
                {
                    libro.SaveAs(memoria);
                    var nombreExcel = string.Concat("Plantilla Profesores", ".xlsx");

                    await JS.InvokeAsync<object>(
                        "saveAsFile",
                        nombreExcel,
                        Convert.ToBase64String(memoria.ToArray())
                    );
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    async Task CallbackInsertarExcel()
    {
        data = await api.Mantenimientos_GetAllProfesorAsync();
        StateHasChanged();
    }
}

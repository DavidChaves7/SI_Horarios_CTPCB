
@inject SIHAPI api
<Div Class="main-content">

    <LoadingIndicator Visible="@(data is null)">
        <ChildContent>
            <Button Class="btn btn-create" Margin="Margin.Is3.FromTop.Is3.FromTop" Clicked="modalSubir.Open">Importar Archivo</Button>
            <br />
            <br />
            <Row>
                <ButtonsExportComponent T="MateriaDto" Data="data" Titulo="Materias y Lecciones" />

            </Row>

            <DataGrid UseInternalEditing="false" Hoverable @bind-SelectedRow="@selecteddata" CommandMode="DataGridCommandMode.ButtonRow" Editable Striped TItem="MateriaDto" Data="data" PageSize="10" PageSizes="[10, 20, 30]" ShowPageSizes
                      Responsive Filterable Sortable SortMode="DataGridSortMode.Multiple" EditMode="DataGridEditMode.Popup" ShowPager PopupTitleTemplate="SetModalTitle" PopupSize="ModalSize.Large"
                      UseValidation RowInserted="InsertNewItem" RowInserting="ValidateEditFields" RowUpdating="ValidateEditFields" RowUpdated="InsertNewItem" RowRemoving="RemovingRow" RowRemoved="DeleteItem">
                <DataGridColumns>
                    <DataGridColumn Field="@nameof(MateriaDto.Nombre)" Editable Caption="Materia" />
                    <DataGridColumn Field="@nameof(MateriaDto.Tipo)" Editable Caption="Tipo" />


                    @* <DataGridColumn Field="@nameof(MateriaDto.Test)" Editable Caption="Carga Horaria" /> 
                    <DataGridColumn Field="@nameof(MateriaDto.Test)" Editable Caption="Prioridad" /> 
                    <DataGridColumn Field="@nameof(MateriaDto.Test)" Editable Caption="Asociado A" />*@
                </DataGridColumns>
                <ButtonRowTemplate>

                    <Button Class="btn btn-create" Clicked="context.NewCommand.Clicked">Nuevo</Button>
                    <Button Class="btn btn-edit" Disabled="(selecteddata is null)" Clicked="context.EditCommand.Clicked">Editar</Button>
                    <Button Class="btn btn-delete" Disabled="(selecteddata is null)" Clicked="context.DeleteCommand.Clicked">Eliminar</Button>

                </ButtonRowTemplate>
            </DataGrid>


        </ChildContent>
    </LoadingIndicator>
</Div>
<ModalSubirArchivoMaterias @ref="modalSubir"></ModalSubirArchivoMaterias>


@code {


    private string accessCategory { get; set; } = "";
    

    IEnumerable<MateriaDto>? data { get; set; } = new List<MateriaDto>();
    IEnumerable<MateriaDto>? dataTABLA { get; set; } = new List<MateriaDto>();

    private MateriaDto? selecteddata;
    private MateriaDto? selecteddataTABLA;

    private Snackbar? snackbarPrimary;
    

    ModalSubirArchivoMaterias? modalSubir;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {

            // #region Seguridad

            // var httpContext = HttpContextAccessor.HttpContext;
            // var userName = "";
            // if (httpContext != null)
            // {
            //     var user = httpContext.User;
            //     userName = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            // }


            // string securityResult = await api.Seguridad_ValidateAccessAsync(new VerificaPermisoRequest
            // {
            //     PCodAccion = "BCCR_PARAM_GENERALES",
            //     PCodCompania = "0001",
            //     PCodModulo = "CPC",
            //     PCodUsuario = userName
            // });
            // if (securityResult.ToUpper().Contains("ERROR"))
            // {
            //     await Task.FromResult(MessageService.Error(securityResult, "Error al validar acceso"));
            // }
            // else
            // {
            //     accessCategory = securityResult;
            // }

            // #endregion
            data = await api.Mantenimientos_GetAllMateriasAsync();
            // data = new List<MateriaDto>
            // {
            //     new MateriaDto
            //     {
            //         Id = 1,
            //         Descripcion = "Matematicas",
            //         Test = "40"
            //     },
            //     new MateriaDto
            //     {
            //         Id = 2,
            //         Descripcion = "Electiva",
            //         Test = "15"
            //     }
            // };
            // dataTABLA = new List<MateriaDto>
            // {
            //     new MateriaDto
            //     {
            //         Id = 1,
            //         Descripcion = "Matematicas",
            //         Test = "20"
            //     },
            //     new MateriaDto
            //     {
            //         Id = 2,
            //         Descripcion = "Electiva 2",
            //         Test = "30"
            //     }
            // };
             StateHasChanged();
        }
    }

    RenderFragment SetModalTitle(PopupTitleContext<MateriaDto> context)
    {
        var title = context.EditState == DataGridEditState.New ? "Nuevos" : "Editar";
        return (__builder) =>
        {
            <Span>
                @($"{title} Materias Y Lecciones")
            </Span>
        };
    }

    async Task InsertNewItem(SavedRowItem<MateriaDto, Dictionary<string, object>> item)
    {
        try
        {


            var errors = item.NewItem.ValidateObjectFields();
            if (!string.IsNullOrEmpty(errors))
            {
                await Task.FromResult(MessageService.Info(errors, "Datos requeridos faltantes"));
            }
            else
            {
                await api.Mantenimientos_AddUpdateMateriasAsync(item.NewItem);
                data = await api.Mantenimientos_GetAllMateriasAsync();
            }
        }
        catch (Exception ex)
        {

        }
    }

    Task ValidateEditFields(CancellableRowChange<MateriaDto, Dictionary<string, object>> item)
    {

        var errors = item.NewItem.ValidateObjectFields();
        if (!string.IsNullOrEmpty(errors))
        {
            item.Cancel = true;
            return MessageService.Info(errors, "Datos requeridos faltantes");
        }
        else
        {
            return Task.CompletedTask;
        }
    }

    async Task DeleteItem(MateriaDto item)
    {
        await api.Mantenimientos_DeleteMateriasAsync(item);
        data = await api.Mantenimientos_GetAllMateriasAsync();
        data = data.Where(x => x.Id_Materia != item.Id_Materia);
    }

    async Task RemovingRow(CancellableRowChange<MateriaDto> item)
    {
        var delete = await MessageService.Confirm($"Está seguro de eliminar la Mataria {item.OldItem.Nombre}?", "Eliminar Materia", opt =>
        {
            // opt.MessageIcon = Icon
        });
        if (!delete)
        {
            item.Cancel = true;
        }
    }
}

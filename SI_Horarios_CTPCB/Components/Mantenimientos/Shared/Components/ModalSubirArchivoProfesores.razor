<Modal @ref="modal">
    <ModalContent  Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Subir Archivo Profesores</ModalTitle>
            <CloseButton></CloseButton>
        </ModalHeader>
        <ModalBody>
            <LoadingIndicator @bind-Visible="isLoading">
                <ChildContent>
                    <Row Class="justify-content-center">
                        <Column ColumnSize="ColumnSize.Is12" Class="justify-content-center">

                            @* <label for="file-upload" class="file-upload-button">Seleccionar Archivo de Profesores</label>
                            <InputFile id="file-upload" OnChange="@SeleccionarExcel" Class="input-file-hidden" />

                            @if (!string.IsNullOrEmpty(fileName))
                            {
                                <span class="file-name">@fileName</span>
                                <Button Clicked="@LimpiarArchivo" Class="clear-button">✕</Button>
                            } *@

                            <FilePicker id="file-upload-mat" Filter=".xlsx" Upload="@Cargar" Class="input-file-hidden">
                                <FileTemplate>
                                    <Div Flex="Flex.JustifyContent.Between">
                                        <Div>
                                            <Heading Size="HeadingSize.Is5">@context.File.Name</Heading>
                                            <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                        </Div>
                                        <Div>
                                            @if (context.File.Status == FileEntryStatus.Ready)
                                            {
                                                <Icon Name="IconName.FileUpload" />
                                            }
                                            else if (context.File.Status == FileEntryStatus.Uploading)
                                            {
                                                <Icon Name="IconName.Bolt" />
                                            }
                                            else if (context.File.Status == FileEntryStatus.Uploaded)
                                            {
                                                <Icon Name="IconName.CheckCircle" />
                                            }
                                            else if (context.File.Status == FileEntryStatus.Error)
                                            {
                                                <Icon Name="IconName.TimesCircle" />
                                            }
                                        </Div>
                                    </Div>
                                    <Divider Margin="Margin.Is0" />
                                </FileTemplate>
                                <ButtonsTemplate>
                                    <Buttons>
                                        <Button Clicked="@context.Clear" Class="btn-outline-danger"><Icon Name="IconName.Clear" /> Limpiar</Button>
                                        <Button Clicked="@context.Upload" Class="file-upload-button"><Icon Name="IconName.FileUpload" /> Subir Archivo</Button>
                                    </Buttons>
                                </ButtonsTemplate>
                            </FilePicker>
                        </Column>
                    </Row>
                </ChildContent>
            </LoadingIndicator>
        </ModalBody>
        <ModalFooter>
            <Button Class="btn-outline-danger" Clicked="@Hide">Cerrar</Button>
            @* <Button Clicked="@Cargar" disabled="@isLoading" Class="file-upload-button">Subir Archivo</Button> *@
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    Modal? modal;

    public bool isLoading { get; set; } = false;

    [Parameter]
    public EventCallback OnInsert { get; set; }

    private IBrowserFile? _selectedFile;
    public string? fileName;

    private void LimpiarArchivo()
    {
        _selectedFile = null;
        fileName = string.Empty;
        StateHasChanged();
    }

    // private async Task SeleccionarExcel(InputFileChangeEventArgs e)
    // {
    //     try
    //     {
    //         _selectedFile = e.File;
    //         fileName = e.File.Name;
    //     }
    //     catch (Exception ex)
    //     {
    //     }
    //     finally
    //     {
    //     }
    // }

    private async Task Cargar(FileUploadEventArgs e)
    {
        try
        {
            isLoading = true;
            if (e.File != null)
            {

                using (var stream = e.File.OpenReadStream())
                {
                    var buffer = new byte[stream.Length];
                    await stream.ReadAsync(buffer, 0, buffer.Length);

                    OfficeOpenXml.ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.NonCommercial;

                    using (var package = new ExcelPackage(new MemoryStream(buffer)))
                    {
                        var worksheets = package.Workbook.Worksheets;
                        if (worksheets.Count > 0)
                        {
                            var worksheet = worksheets[0];
                            for (int i = 2; i <= worksheet.Dimension.End.Row; i++)
                            {
                                var IdProfesor = 0;
                                var Cedula = worksheet.Cells[i, 1].Text;
                                var Nombre = worksheet.Cells[i, 2].Text;
                                var Apellidos = worksheet.Cells[i, 3].Text;
                                var Correo = worksheet.Cells[i, 4].Text;
                                var Telefono = worksheet.Cells[i, 5].Text;
                                var CargaHoraria = Convert.ToInt32( worksheet.Cells[i, 6].Text);

                                // ¿Aquí todo tiene valor válido?
                                await api.Mantenimientos_AddUpdateProfesorAsync(new ProfesorDto()
                                {
                                    Id_Profesor = IdProfesor,
                                    Cedula = Cedula,
                                    Nombre = Nombre,
                                    Apellido = Apellidos,
                                    Correo = Correo,
                                    Telefono = Telefono,
                                    Carga_Horaria = CargaHoraria,
                                    Estado = "A"
                                });

                            }
                        }
                    }
                }
                await Hide();
                await OnInsert.InvokeAsync();

            }
            else
            {
                await Task.FromResult(MessageService.Info("Ocurrio un error al subir el archivo, el archivo no se subio correctamente", "Datos requeridos faltantes"));
            }
        }
        catch (Exception ex)
        {
        }
        finally
        {
            _selectedFile = null;
            isLoading = false;
        }
    }

    public Task Hide()
    {
        modal?.Close(CloseReason.UserClosing);
        return Task.CompletedTask;
    }

    public async Task Open()
    {
        modal?.Show();
    }    

}

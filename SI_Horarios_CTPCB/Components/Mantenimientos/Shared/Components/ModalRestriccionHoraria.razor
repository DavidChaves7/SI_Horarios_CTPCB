<Modal @ref="modal">
    <ModalContent Centered Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Restricciones Horarias</ModalTitle>
            <CloseButton></CloseButton>
        </ModalHeader>
        <ModalBody>
            <LoadingIndicator @bind-Visible="isLoading">
                <ChildContent>
                    <Row>
                        <ButtonsExportComponent T="EjemploMantDto" Data="data" Titulo="Restricciones Horarias" />

                    </Row>

                    <DataGrid UseInternalEditing="false" Hoverable @bind-SelectedRow="@selecteddata" CommandMode="DataGridCommandMode.ButtonRow" Editable Striped TItem="EjemploMantDto" Data="data" PageSize="10" PageSizes="[10, 20, 30]" ShowPageSizes
                              Responsive Filterable Sortable SortMode="DataGridSortMode.Multiple" EditMode="DataGridEditMode.Popup" ShowPager PopupTitleTemplate="SetModalTitle" PopupSize="ModalSize.Large"
                              UseValidation RowInserted="InsertNewItem" RowInserting="ValidateEditFields" RowUpdating="ValidateEditFields" RowUpdated="InsertNewItem" RowRemoving="RemovingRow" RowRemoved="DeleteItem">
                        <DataGridColumns>
                            @* <DataGridColumn Field="@nameof(CatalogCCSSDto.CoD_RUBRO)" Editable Caption="Código Rubro">
                        <EditTemplate>
                            <TextEdit Text="@((string)context.CellValue)" TextChanged="@( v => context.CellValue = v)" Disabled="@(!string.IsNullOrEmpty(context.Item.CoD_RUBRO))">
                                <Feedback>
                                    <ValidationError />
                                    <ValidationNone />
                                </Feedback>
                            </TextEdit>
                        </EditTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(CatalogCCSSDto.DesC_RUBRO)" Editable Caption="Descripción"></DataGridColumn>
                    <DataGridColumn Field="@nameof(CatalogCCSSDto.PorC_RUBRO)" Editable Caption="Porcentaje">
                        <DisplayTemplate>
                            <TextEdit ReadOnly Text="@(Convert.ToDouble(context.PorC_RUBRO).ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("en-US")))"></TextEdit>
                        </DisplayTemplate>
                    </DataGridColumn> *@
                            <DataGridColumn Field="@nameof(EjemploMantDto.Id)" Editable Caption="Cedula Profesor" />
                            <DataGridColumn Field="@nameof(EjemploMantDto.Descripcion)" Editable Caption="Dia" />
                            <DataGridColumn Field="@nameof(EjemploMantDto.Test)" Editable Caption="Hora Inicio" />
                            <DataGridColumn Field="@nameof(EjemploMantDto.Test)" Editable Caption="Hora Fin" />
                        </DataGridColumns>
                        <ButtonRowTemplate>

                            <Button Class="btn btn-create" Clicked="context.NewCommand.Clicked">Nuevo</Button>
                            <Button Class="btn btn-edit" Disabled="(selecteddata is null)" Clicked="context.EditCommand.Clicked">Editar</Button>
                            <Button Class="btn btn-delete" Disabled="(selecteddata is null)" Clicked="context.DeleteCommand.Clicked">Eliminar</Button>

                        </ButtonRowTemplate>
                    </DataGrid>
                </ChildContent>
            </LoadingIndicator>
        </ModalBody>
        <ModalFooter>
            <Button Class="btn-outline-danger" Clicked="@Hide">Cerrar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    Modal? modal;

    
    public bool isLoading { get; set; } = false;

    IEnumerable<EjemploMantDto>? data { get; set; } = new List<EjemploMantDto>();
    private EjemploMantDto? selecteddata;
    [Inject] IMessageService MessageService { get; set; } = null!;

    public Task Hide()
    {
        modal?.Close(CloseReason.UserClosing);
        return Task.CompletedTask;
    }

    public async Task Open()
    {
        modal?.Show();
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {

            data = new List<EjemploMantDto>
            {
                new EjemploMantDto
                {
                    Id = 118820407,
                    Descripcion = "Lunes",
                    Test = "3"
                },
                new EjemploMantDto
                {
                    Id = 209945596,
                    Descripcion = "Martes",
                    Test = "3"
                }
            };
            
            StateHasChanged();
        }
    }

    RenderFragment SetModalTitle(PopupTitleContext<EjemploMantDto> context)
    {
        var title = context.EditState == DataGridEditState.New ? "Nuevas" : "Editar";
        return (__builder) =>
        {
            <Span>
                @($"{title} Restricciones")
            </Span>
        };
    }

    async Task InsertNewItem(SavedRowItem<EjemploMantDto, Dictionary<string, object>> item)
    {
        try
        {


            var errors = item.NewItem.ValidateObjectFields();
            if (!string.IsNullOrEmpty(errors))
            {
                await Task.FromResult(MessageService.Info(errors, "Datos requeridos faltantes"));
            }
            else
            {
                //await api.Parameters_AddUpdateParametersBCCRsAsync(item.NewItem);
                //data = await api.Mantenimientos_GetAllEjemploMantAsync();
                data.Append(item.NewItem);
            }
        }
        catch (Exception ex)
        {

        }
    }

    Task ValidateEditFields(CancellableRowChange<EjemploMantDto, Dictionary<string, object>> item)
    {

        var errors = item.NewItem.ValidateObjectFields();
        if (!string.IsNullOrEmpty(errors))
        {
            item.Cancel = true;
            return MessageService.Info(errors, "Datos requeridos faltantes");
        }
        else
        {
            return Task.CompletedTask;
        }
    }

    async Task DeleteItem(EjemploMantDto item)
    {
        //await api.Parameters_DeleteParametersBCCRAsync(item);
        //data = await api.Mantenimientos_GetAllEjemploMantAsync();
        data = data.Where(x => x.Id != item.Id);
    }

    async Task RemovingRow(CancellableRowChange<EjemploMantDto> item)
    {
        var delete = await MessageService.Confirm($"Está seguro de eliminar el Parámetro {item.OldItem.Id}?", "Eliminar Parámetro", opt =>
        {
            // opt.MessageIcon = Icon
        });
        if (!delete)
        {
            item.Cancel = true;
        }
    }


}

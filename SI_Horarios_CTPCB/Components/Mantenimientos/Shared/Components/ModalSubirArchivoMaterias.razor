<Modal @ref="modal">
    <ModalContent Centered Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Subir Archivo Materias</ModalTitle>
            <CloseButton></CloseButton>
        </ModalHeader>
        <ModalBody>
            <LoadingIndicator @bind-Visible="isLoading">
                <ChildContent>
                    <Row Class="justify-content-center">
                        <Column ColumnSize="ColumnSize.Is12" Class="justify-content-center">

                            <label for="file-upload" class="file-upload-button">Seleccionar Archivo de las Materias</label>
                            <InputFile id="file-upload" OnChange="@SeleccionarExcel" Class="input-file-hidden" />

                            @if (!string.IsNullOrEmpty(fileName))
                            {
                                <span class="file-name">@fileName</span>
                                <Button Clicked="@LimpiarArchivo" Class="clear-button">✕</Button>
                            }
                        </Column>
                    </Row>
                </ChildContent>
            </LoadingIndicator>
        </ModalBody>
        <ModalFooter>
            <Button Class="btn-outline-danger" Clicked="@Hide">Cerrar</Button>
            <Button Clicked="@Cargar" disabled="@isLoading" Class="file-upload-button">Subir Archivo</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    Modal? modal;

    public bool isLoading { get; set; } = false;

    [Parameter]
    public EventCallback OnInsert { get; set; }

    private IBrowserFile? _selectedFile;
    public string? fileName;
      
    private void LimpiarArchivo()
    {
        _selectedFile = null;
        fileName = string.Empty;
        StateHasChanged();
    }

    private async Task SeleccionarExcel(InputFileChangeEventArgs e)
    {
        try
        {
            _selectedFile = e.File;
            fileName = e.File.Name;
        }
        catch (Exception ex)
        {
        }
        finally
        {
        }
    }

    private async Task Cargar()
    {
        try
        {
            isLoading = true;
            if (_selectedFile != null)
            {

                using (var stream = _selectedFile.OpenReadStream())
                {
                    var buffer = new byte[stream.Length];
                    await stream.ReadAsync(buffer, 0, buffer.Length);

                    OfficeOpenXml.ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.NonCommercial;

                    using (var package = new ExcelPackage(new MemoryStream(buffer)))
                    {
                        var worksheets = package.Workbook.Worksheets;
                        if (worksheets.Count > 0)
                        {
                            var worksheet = worksheets[0];
                            for (int i = 2; i <= worksheet.Dimension.End.Row; i++)
                            {
                                var nombre = worksheet.Cells[i, 1].Text;
                                var tipo = worksheet.Cells[i, 2].Text;
                                tipo = (tipo == "T" || tipo == "A") ? tipo : "A";
                                // var color = worksheet.Cells[i, 3].Text;
                                var color = "#FFFFFF";

                                await api.Mantenimientos_AddUpdateMateriasDesdeExcelAsync(new MateriaDto() {
                                    Id_Materia = 0, 
                                    Nombre = nombre, 
                                    Tipo = tipo, 
                                    Color = color, 
                                    Estado = "A"
                                });

                            }
                        }
                    }
                }
                await Hide();
                await OnInsert.InvokeAsync();
            }



        }
        catch (Exception ex)
        {
        }
        finally
        {
            _selectedFile = null;
            isLoading = false;
        }
    }

    


    public Task Hide()
    {
        modal?.Close(CloseReason.UserClosing);
        return Task.CompletedTask;
    }

    public async Task Open()
    {
        modal?.Show();
        
    }

    

}

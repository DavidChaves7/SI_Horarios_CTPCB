<Modal @ref="modal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Subir Archivo Materias</ModalTitle>
            <CloseButton></CloseButton>
        </ModalHeader>
        <ModalBody>
            <LoadingIndicator @bind-Visible="isLoading">
                <ChildContent>
                    <Row Class="justify-content-center">
                        <Column ColumnSize="ColumnSize.Is12" Class="justify-content-center">
                            @* <label for="file-upload-mat" class="file-upload-button">Seleccionar Archivo de las Materias</label> *@

                            <FilePicker id="file-upload-mat" Filter=".xlsx" Upload="@Cargar" Class="input-file-hidden">
                                <FileTemplate>
                                    <Div Flex="Flex.JustifyContent.Between">
                                        <Div>
                                            <Heading Size="HeadingSize.Is5">@context.File.Name</Heading>
                                            <Paragraph>@FilePicker.GetFileSizeReadable(context.File)</Paragraph>
                                        </Div>
                                        <Div>
                                            @if (context.File.Status == FileEntryStatus.Ready)
                                            {
                                                <Icon Name="IconName.FileUpload" />
                                            }
                                            else if (context.File.Status == FileEntryStatus.Uploading)
                                            {
                                                <Icon  Name="IconName.Bolt" />
                                            }
                                            else if (context.File.Status == FileEntryStatus.Uploaded)
                                            {
                                                <Icon  Name="IconName.CheckCircle" />
                                            }
                                            else if (context.File.Status == FileEntryStatus.Error)
                                            {
                                                <Icon Name="IconName.TimesCircle" />
                                            }
                                        </Div>
                                    </Div>
                                    <Divider Margin="Margin.Is0" />
                                </FileTemplate>
                                <ButtonsTemplate>
                                    <Buttons>
                                        <Button Clicked="@context.Clear" Class="btn-outline-danger"><Icon Name="IconName.Clear" /> Limpiar</Button>
                                        <Button Clicked="@context.Upload" Class="file-upload-button"><Icon Name="IconName.FileUpload" /> Subir Archivo</Button>
                                    </Buttons>
                                </ButtonsTemplate>
                            </FilePicker>




                            @* @if (!string.IsNullOrEmpty(fileNameMat))
                            {
                                <span class="file-name">@fileNameMat</span>
                                <Button Clicked="@LimpiarArchivo" Class="clear-button">✕</Button>
                            } *@
                        </Column>
                    </Row>
                </ChildContent>
            </LoadingIndicator>
        </ModalBody>
        <ModalFooter>
            <Button Class="btn-outline-danger" Clicked="@Hide">Cerrar</Button>
            @* <Button Clicked="@Cargar" Disabled="@isLoading" Class="file-upload-button">Subir Archivo</Button> *@
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    Modal? modal;

    public bool isLoading { get; set; } = false;

    [Parameter]
    public EventCallback OnInsert { get; set; }

    private IFileEntry? _selectedFileMat;
    public string? fileNameMat;

    // private void LimpiarArchivo()
    // {
    //     _selectedFileMat = null;
    //     fileNameMat = string.Empty;
    //     // No llamar a StateHasChanged aquí para evitar perder la referencia del archivo
    // }

    // private async Task SeleccionarExcel(FileUploadEventArgs e)
    // {
    //     try
    //     {
    //         if (e.File != null)
    //         {
    //             _selectedFileMat = e.File;
    //             fileNameMat = _selectedFileMat.Name;
    //         }
    //         else
    //         {
    //             _selectedFileMat = null;
    //             fileNameMat = string.Empty;
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //     }
    // }

    private async Task Cargar(FileUploadEventArgs e)
    {
        try
        {
            isLoading = true;
            if (e.File != null)
            {
                using (var stream = e.File.OpenReadStream())
                {
                    var buffer = new byte[stream.Length];
                    await stream.ReadAsync(buffer, 0, buffer.Length);

                    OfficeOpenXml.ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.NonCommercial;

                    using (var package = new ExcelPackage(new MemoryStream(buffer)))
                    {
                        var worksheets = package.Workbook.Worksheets;
                        if (worksheets.Count > 0)
                        {
                            var worksheet = worksheets[0];
                            for (int i = 2; i <= worksheet.Dimension.End.Row; i++)
                            {
                                var nombre = worksheet.Cells[i, 1].Text;
                                var tipo = worksheet.Cells[i, 2].Text;
                                tipo = (tipo == "T" || tipo == "A") ? tipo : "A";
                                // var color = worksheet.Cells[i, 3].Text;
                                var color = "#FFFFFF";

                                await api.Mantenimientos_AddUpdateMateriasDesdeExcelAsync(new MateriaDto()
                                {
                                    Id_Materia = 0,
                                    Nombre = nombre,
                                    Tipo = tipo,
                                    Color = color,
                                    Estado = "A"
                                });
                            }
                        }
                    }
                }
                await Hide();
                await OnInsert.InvokeAsync();
            }
            else
            {
                await Task.FromResult(MessageService.Info("Ocurrio un error al subir el archivo, el archivo no se subio correctamente", "Datos requeridos faltantes"));
            }
        }
        catch (Exception ex)
        {
        }
        finally
        {
            _selectedFileMat = null;
            isLoading = false;
        }
    }

    public Task Hide()
    {
        modal?.Close(CloseReason.UserClosing);
        return Task.CompletedTask;
    }

    public async Task Open()
    {
        modal?.Show();
    }
}

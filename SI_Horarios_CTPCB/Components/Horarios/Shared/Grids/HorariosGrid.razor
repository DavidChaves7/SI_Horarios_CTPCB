<Div Class="main-content">

    <LoadingIndicator Visible="@(isLoading)">
        <ChildContent>
            <Div Class="row mb-4 align-items-end">
                <Div Class="col-md-6">
                    <label>Ver los horarios del Grupo:</label>
                    <Select Class="form-control" SelectedValue="@reportesModel.Grupo" SelectedValueChanged="@GrupoChanged" TValue="string">
                        <SelectItem Value="@((int?)null)">Seleccione una opción</SelectItem>
                        @foreach (var i in dataGrupo ?? new List<GrupoDto>())
                        {
                            <SelectItem Value="@(i.Id_Grupo)">@i.Nombre</SelectItem>
                        }
                    </Select>
                </Div>
                <Div Class="col-md-6 text-end" Padding="Padding.Is4.FromEnd">
                    <Button Class="btn btn-create" Clicked="@GenerarHorario">Generar automáticamente</Button>
                </Div>
                <Div Class="col-md-6" style="display:flex; align-items:baseline; gap:8px; ">

                    <h2 style="font-size: 30px">Profesor Guia: </h2>
                        <label>@nombreProfesorGuia</label>
                </Div>
            </Div>
            <Div Class="row mb-4">
                <DataGrid TItem="BloqueHorario" Data="@bloquesHorario" PageSize="16" ShowPager="false" ShowPageSizes="false" ShowCaptions="true" Editable="false" Responsive="true"
                          Class="table-bordered text-center w-100 no-padding ">

                    <DataGridColumn TItem="BloqueHorario" Field="@nameof(BloqueHorario.RangoHorario)" Caption="Hora" />

                    @foreach (var dia in diasSemana)
                    {
                        <DataGridColumn TItem="BloqueHorario" Caption="@dia">
                            <DisplayTemplate>
                                @{
                                    var detalle = context.GetDetalle(dia);
                                }
                                <div style="background-color:@(context.EsReceso ? "#bbbec2" : (detalle?.Color ?? "#6c757d")); width:100%; height:100%; display:flex; flex-direction:column; justify-content:center; align-items:center; font-size: 18px; padding:5px; border-radius: 12px;">
                                    @if (context.EsReceso)
                                    {
                                        <span>Receso</span>
                                    }
                                    else if (detalle is not null)
                                    {
                                        <span style="color: #555;" ><b style="color: black;">Materia:</b> @detalle.Materia</span>
                                        <span style="color: #555;"><b style="color: black;">Profesor:</b> @detalle.Profesor</span>
                                    }
                                    else
                                    {
                                        <span>Sin asignar</span>
                                    }
                                </div>
                            </DisplayTemplate>
                        </DataGridColumn>
                    }

                </DataGrid>

            </Div>
        </ChildContent>
    </LoadingIndicator>
</Div>
<ModalAsigMateria @ref="modalAsigMateria" OnInsert="CallbackUpdateHorario"></ModalAsigMateria>

@code {
    private bool isLoading = true;
    private ReportesModel reportesModel = new();
    ModalAsigMateria? modalAsigMateria;
    IEnumerable<GrupoDto>? dataGrupo { get; set; } = new List<GrupoDto>();
    private string nombreProfesorGuia = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var resGrupo = await api.Mantenimientos_GetAllGrupossAsync();
            dataGrupo = resGrupo.Where(x => x.Estado.Equals("A"));
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GenerarHorario()
    {
        if (string.IsNullOrEmpty(reportesModel.Grupo))
            return;

        isLoading = true;

        var materias = await api.Mantenimientos_GetAllMateriasAsync();
        var profesores = await api.Mantenimientos_GetAllProfesorAsync();
        var horarioGen = await api.Horarios_GenHorarioAsync(Convert.ToInt32(reportesModel.Grupo));
        AsignarHorariosABloques(horarioGen, materias, profesores);

        isLoading = false;
    }

    private async Task GrupoChanged(string value)
    {
        reportesModel.Grupo = value;
        await ActualizarProfesorGuia();
        if (!string.IsNullOrEmpty(reportesModel.Grupo))
        {
            await ObtenerHorarios();
        }
    }

    private async Task ActualizarProfesorGuia()
    {
        nombreProfesorGuia = string.Empty;
        if (!string.IsNullOrEmpty(reportesModel.Grupo) && dataGrupo is not null)
        {
            var grupo = dataGrupo.FirstOrDefault(g => g.Id_Grupo.ToString() == reportesModel.Grupo);
            if (grupo is not null && !string.IsNullOrEmpty(grupo.Id_Profesor_Guia))
            {
                var profesores = await api.Mantenimientos_GetAllProfesorAsync();
                var profesor = profesores.FirstOrDefault(p => p.Id_Profesor.ToString() == grupo.Id_Profesor_Guia);
                if (profesor is not null)
                {
                    nombreProfesorGuia = $"{profesor.Nombre} {profesor.Apellido}";
                }
            }
        }
    }

    private async Task ObtenerHorarios()
    {
        isLoading = true;

        var horarios = await api.Horarios_GetOneHorarioAsync(new HorarioDto { Id_Grupo = Convert.ToInt32(reportesModel.Grupo) });
        LimpiarBloquesHorario();

        var materias = await api.Mantenimientos_GetAllMateriasAsync();
        var profesores = await api.Mantenimientos_GetAllProfesorAsync();
        AsignarHorariosABloques(horarios, materias, profesores);

        isLoading = false;
    }

    async Task CallbackUpdateHorario()
    {
        if (!string.IsNullOrEmpty(reportesModel.Grupo))
        {
            await ObtenerHorarios();
        }
    }

    private void LimpiarBloquesHorario()
    {
        foreach (var bloque in bloquesHorario)
        {
            bloque.DetallesPorDia.Clear();
        }
    }

    private void AsignarHorariosABloques(ICollection<HorarioDto> horarios, ICollection<MateriaDto> materias, ICollection<ProfesorDto> profesores)
    {
        foreach (var horario in horarios)
        {
            var bloque = bloquesHorario.FirstOrDefault(b => b.HoraInicio == horario.Hora_Inicio);
            if (bloque is not null)
            {
                var dia = horario.Dia?.ToUpperInvariant() switch
                {
                    "L" => "Lunes",
                    "K" => "Martes",
                    "M" => "Miercoles",
                    "J" => "Jueves",
                    "V" => "Viernes",
                    _ => null
                };
                if (dia is not null)
                {
                    var materia = materias.FirstOrDefault(m => m.Id_Materia == horario.Id_Materia);
                    var profesor = profesores.FirstOrDefault(p => p.Id_Profesor.ToString() == horario.Id_Profesor);
                    bloque.DetallesPorDia[dia] = new DetalleBloque
                    {
                        Materia = materia?.Nombre ?? "Sin asignar",
                        Profesor = profesor is not null ? $"{profesor.Nombre} {profesor.Apellido}" : "Sin asignar",
                        Color = materia?.Color ?? "#6c757d"
                    };
                }
            }
        }
    }

    public class ReportesModel
    {
        public string Grupo { get; set; } = string.Empty;
    }

    private List<string> diasSemana = new() { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes" };

    private List<BloqueHorario> bloquesHorario = new()
    {
        new(new(7, 0, 0), new(7, 40, 0)),
        new(new(7, 40, 0), new(8, 20, 0)),
        new(new(8, 20, 0), new(9, 0, 0)),
        new(new(9, 0, 0), new(9, 20, 0), true), // Receso
        new(new(9, 20, 0), new(10, 0, 0)),
        new(new(10, 0, 0), new(10, 40, 0)),
        new(new(10, 40, 0), new(11, 20, 0)),
        new(new(11, 20, 0), new(12, 0, 0), true), // Almuerzo
        new(new(12, 0, 0), new(12, 40, 0)),
        new(new(12, 40, 0), new(13, 20, 0)),
        new(new(13, 20, 0), new(14, 0, 0)),
        new(new(14, 0, 0), new(14, 20, 0), true), // Receso
        new(new(14, 20, 0), new(15, 0, 0)),
        new(new(15, 0, 0), new(15, 40, 0)),
        new(new(15, 40, 0), new(16, 20, 0))
    };

    public class BloqueHorario
    {
        public int IdHorario { get; set; }
        public TimeSpan HoraInicio { get; set; }
        public TimeSpan HoraFin { get; set; }
        public bool EsReceso { get; set; }
        public string RangoHorario { get; private set; }
        public Dictionary<string, DetalleBloque> DetallesPorDia { get; set; } = new();

        public BloqueHorario(TimeSpan horaInicio, TimeSpan horaFin, bool esReceso = false)
        {
            HoraInicio = horaInicio;
            HoraFin = horaFin;
            EsReceso = esReceso;
            RangoHorario = $"{DateTime.Today.Add(HoraInicio):hh\\:mm tt} - {DateTime.Today.Add(HoraFin):hh\\:mm tt}";
        }

        public DetalleBloque? GetDetalle(string dia)
        {
            DetallesPorDia.TryGetValue(dia, out var detalle);
            return detalle;
        }
    }

    public class DetalleBloque
    {
        public string Materia { get; set; } = "";
        public string Profesor { get; set; } = "";
        public string Color { get; set; } = "#6c757d";
    }
}

<Div Class="main-content">
    <LoadingIndicator Visible="@(isLoading)">
        <ChildContent>
            <Div Class="row mb-4 align-items-end">
                <Div Class="col-md-6">
                    <label>Grupo</label>

                    <Select @bind-SelectedValue="reportesModel.Grupo" Class="form-control">
                        <SelectItem Value="@((int?)null)">Seleccione una opción</SelectItem>
                        @foreach (var i in dataGrupo ?? new List<GrupoDto>())
                        {
                            <SelectItem Value="@(i.Id_Grupo)">@i.Nombre</SelectItem>
                        }
                    </Select>
                </Div>
                <Div Class="col-md-2 text-end">
                    <Button Class="btn btn-create" Clicked="@GenerarHorario">Generar automáticamente</Button>
                </Div>
            </Div>
            <Div Class="row mb-4">
                <DataGrid TItem="BloqueHorario" Data="@bloquesHorario" PageSize="16" ShowPager="false" ShowPageSizes="false" ShowCaptions="true" Editable="false" Responsive="true" Hoverable="true"
                Class="table-bordered text-center w-100 no-padding">

                    <DataGridColumn TItem="BloqueHorario" Field="@nameof(BloqueHorario.Hora)" Caption="Hora" Width="180px" />

                    @foreach (var dia in diasSemana)
                    {
                        <DataGridColumn TItem="BloqueHorario" Caption="@dia">
                            <DisplayTemplate Context="context">
                                <Button Class="@DeterminarClase(context.EsReceso)" Clicked="() => modalAsigMateria!.Open(dia,context.Hora)">@DeterminarNombre(context.EsReceso)</Button>
                            </DisplayTemplate>
                        </DataGridColumn>
                    }

                </DataGrid>

            </Div>
        </ChildContent>
    </LoadingIndicator>
</Div>
<ModalAsigMateria @ref="modalAsigMateria"></ModalAsigMateria>

@code {
    private bool isLoading = false;
    private ReportesModel reportesModel = new();
    ModalAsigMateria? modalAsigMateria;


    IEnumerable<GrupoDto>? dataGrupo { get; set; } = new List<GrupoDto>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var resGrupo = await api.Mantenimientos_GetAllGrupossAsync();
            dataGrupo = resGrupo.Where(x => x.Estado.Equals("A"));
            StateHasChanged();
        }
    }
    private async Task GenerarHorario()
    {
        isLoading = true;
        // Lógica de generación de horario
        var materias = await api.Mantenimientos_GetAllMateriasAsync();

        var horarios = await api.Horarios_GenHorarioAsync(Convert.ToInt32(reportesModel.Grupo));

        foreach (var horario in horarios)
        {
            var horaInicio = horario.Hora_Inicio; // tipo TimeSpan

            var bloque = bloquesHorario.FirstOrDefault(b =>
                ObtenerHoraInicio(b.Hora) == horaInicio);

            if (bloque is not null)
            {
                var dia = horario.Dia.ToUpperInvariant();
                var materia = materias.FirstOrDefault(m => m.Id_Materia == horario.Id_Materia); 

                switch (dia)
                {
                    case "Lunes": bloque.Lunes = materia?.Nombre; break; 
                    case "Martes": bloque.Martes = materia?.Nombre; break;
                    case "Miercoles": bloque.Miércoles = materia?.Nombre; break;
                    case "Jueves": bloque.Jueves = materia?.Nombre; break;
                    case "Viernes": bloque.Viernes = materia?.Nombre; break;
                    default: break;
                }
            }
        }

        
        isLoading = false;
    }


    

    public class ReportesModel
    {
        public string Grupo { get; set; } = string.Empty;
    }

    private List<string> diasSemana = new() { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes" };

    private List<BloqueHorario> bloquesHorario = new()
{
    new("7:00 am - 7:40 am"),
    new("7:40 am - 8:20 am"),
    new("8:20 am - 9:00 am"),
    new("9:00 am - 9:20 am", true),
    new("9:20 am - 10:00 am"),
    new("10:00 am - 10:40 am"),
    new("10:40 am - 11:20 am"),
    new("11:20 am - 12:00 pm", true),
    new("12:00 pm - 12:40 pm"),
    new("12:40 pm - 1:20 pm"),
    new("1:20 pm - 2:00 pm"),
    new("2:00 pm - 2:20 pm", true),
    new("2:20 pm - 3:00 pm"),
    new("3:00 pm - 3:40 pm"),
    new("3:40 pm - 4:20 pm")
};


    protected override void OnInitialized()
    {
        
        // Initialize data or state here if needed
    }

    private string DeterminarNombre( bool esReceso) 
    {
        return esReceso ? "Receso" : "";
    }

    private string DeterminarClase(bool esReceso)
    {
        return esReceso ? "btn btn-secondary w-100 h-100" : "btn btn-outline-primary w-100 h-100";
    }

    private string GetMateriaDelDia(BloqueHorario context, string dia)
    {
        return dia switch
        {
            "Lunes" => context.Lunes ?? DeterminarNombre(context.EsReceso),
            "Martes" => context.Martes ?? DeterminarNombre(context.EsReceso),
            "Miércoles" => context.Miércoles ?? DeterminarNombre(context.EsReceso),
            "Jueves" => context.Jueves ?? DeterminarNombre(context.EsReceso),
            "Viernes" => context.Viernes ?? DeterminarNombre(context.EsReceso),
            _ => ""
        };
    }
    private static TimeSpan ObtenerHoraInicio(string rangoHora)
    {
        var horaInicioStr = rangoHora.Split(" - ")[0].Trim();
        return DateTime.Parse(horaInicioStr).TimeOfDay;
    }


    public class BloqueHorario
    {
        public string Hora { get; set; }
        public bool EsReceso { get; set; }

        public string? Lunes { get; set; }
        public string? Martes { get; set; }
        public string? Miércoles { get; set; }
        public string? Jueves { get; set; }
        public string? Viernes { get; set; }

        public BloqueHorario(string hora, bool esReceso = false)
        {
            Hora = hora;
            EsReceso = esReceso;
        }
    }
    
    
}

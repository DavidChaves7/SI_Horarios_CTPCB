<Div Class="main-content">

    <LoadingIndicator Visible="@(isLoading)">
        <ChildContent>
            <Div Class="row mb-4 align-items-end">
                <Div Class="col-md-6">
                    <label>Ver los horarios del Grupo:</label>
                    <Select Class="form-control" SelectedValue="@reportesModel.Grupo" SelectedValueChanged="@GrupoChanged" TValue="string">
                        <SelectItem Value="@((int?)null)">Seleccione una opción</SelectItem>
                        @foreach (var i in dataGrupo ?? new List<GrupoDto>())
                        {
                            <SelectItem Value="@(i.Id_Grupo)">@i.Nombre</SelectItem>
                        }
                    </Select>
                </Div>
                <Div Class="col-md-6 text-end" Padding="Padding.Is4.FromEnd">
                    <Button Class="btn btn-create" Clicked="@GenerarHorario">Generar automáticamente</Button>
                </Div>
            </Div>
            <Div Class="row mb-4">
                <DataGrid TItem="BloqueHorario" Data="@bloquesHorario" PageSize="16" ShowPager="false" ShowPageSizes="false" ShowCaptions="true" Editable="false" Responsive="true" Hoverable="true"
                          Class="table-bordered text-center w-100 no-padding">

                    <DataGridColumn TItem="BloqueHorario" Field="@nameof(BloqueHorario.RangoHorario)" Caption="Hora" Width="180px" />

                    @foreach (var dia in diasSemana)
                    {
                        <DataGridColumn TItem="BloqueHorario" Caption="@dia">
                            <DisplayTemplate>
                                <Button Class="@DeterminarClase(context.EsReceso)" Style="@($"background-color: {DeterminarColor(context.EsReceso, GetColorDelDia(context, dia))};")" Clicked="() => modalAsigMateria!.Open(Convert.ToInt32(reportesModel.Grupo), dia, context.HoraInicio, context.HoraFin, context.IdHorario)">
                                    @DeterminarNombre(context.EsReceso, GetMateriaDelDia(context, dia))
                                </Button>
                            </DisplayTemplate>
                        </DataGridColumn>
                    }

                </DataGrid>

            </Div>
        </ChildContent>
    </LoadingIndicator>
</Div>
<ModalAsigMateria @ref="modalAsigMateria" OnInsert="CallbackUpdateHorario"></ModalAsigMateria>

@code {
    private bool isLoading = true;
    private ReportesModel reportesModel = new();
    ModalAsigMateria? modalAsigMateria;
    private bool usarColorAlternativo = true; // Variable hard-codeada para controlar el uso del color alternativo
    IEnumerable<GrupoDto>? dataGrupo { get; set; } = new List<GrupoDto>();

    //trae los datos apenas carga la pagina
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var resGrupo = await api.Mantenimientos_GetAllGrupossAsync();
            dataGrupo = resGrupo.Where(x => x.Estado.Equals("A"));
            isLoading = false;
            StateHasChanged();
        }
    }

    //genera el horario del grupo
    private async Task GenerarHorario()
    {
        if (string.IsNullOrEmpty(reportesModel.Grupo))
            return;

        isLoading = true;

        var materias = await api.Mantenimientos_GetAllMateriasAsync();
        var horarioGen = await api.Horarios_GenHorarioAsync(Convert.ToInt32(reportesModel.Grupo));
        AsignarHorariosABloques(horarioGen, materias);

        isLoading = false;
    }

    //cada que cambian el grupo en el select, trae y carga el horario del grupo respectivo
    private async Task GrupoChanged(string value)
    {
        reportesModel.Grupo = value;
        if (!string.IsNullOrEmpty(reportesModel.Grupo))
        {
            await ObtenerHorarios();
        }
    }

    private async Task ObtenerHorarios()
    {
        isLoading = true;

        var horarios = await api.Horarios_GetOneHorarioAsync(new HorarioDto { Id_Grupo = Convert.ToInt32(reportesModel.Grupo) });
        LimpiarBloquesHorario();

        var materias = await api.Mantenimientos_GetAllMateriasAsync();
        AsignarHorariosABloques(horarios, materias);

        isLoading = false;
    }

    async Task CallbackUpdateHorario()
    {
        if (!string.IsNullOrEmpty(reportesModel.Grupo))
        {
            await ObtenerHorarios();
        }
    }

    //limpia los horarios
    private void LimpiarBloquesHorario()
    {
        foreach (var bloque in bloquesHorario)
        {
            bloque.Lunes = null;
            bloque.Martes = null;
            bloque.Miercoles = null;
            bloque.Jueves = null;
            bloque.Viernes = null;
        }
    }

    //asigna los horarios a las celdas del dataGrid
    private void AsignarHorariosABloques(ICollection<HorarioDto> horarios, ICollection<MateriaDto> materias)
    {
        foreach (var horario in horarios)
        {
            var horaInicio = horario.Hora_Inicio;

            var bloque = bloquesHorario.FirstOrDefault(b => b.HoraInicio == horaInicio);

            if (bloque is not null)
            {
                var dia = horario.Dia.ToUpperInvariant();
                var materia = materias.FirstOrDefault(m => m.Id_Materia == horario.Id_Materia);
                bloque.Color = materia?.Color ?? "";
                bloque.IdHorario = horario.Id_Horario;
                switch (dia)
                {
                    case "L": bloque.Lunes = materia?.Nombre ?? "Sin asignar"; break;
                    case "K": bloque.Martes = materia?.Nombre ?? "Sin asignar"; break;
                    case "M": bloque.Miercoles = materia?.Nombre ?? "Sin asignar"; break;
                    case "J": bloque.Jueves = materia?.Nombre ?? "Sin asignar"; break;
                    case "V": bloque.Viernes = materia?.Nombre ?? "Sin asignar"; break;
                    default: break;
                }
            }
        }
    }


    //revisa si el color esta activo, si es asi le asigna el color de la materia
    private string DeterminarColor(bool esReceso, string? colorMateria)
    {
        if (usarColorAlternativo)
        {
            return esReceso ? "#6c757d" : "#ffffff"; // Color alternativo cuando usarColorAlternativo es true
        }
        return esReceso ? "#6c757d" : (string.IsNullOrWhiteSpace(colorMateria) ? "#ffffff" : colorMateria);
    }


    private string DeterminarNombre(bool esReceso, string? materia)
    {
        return esReceso ? "Receso" : materia ?? "Sin asignar";
    }

    //pone la clase del boton
    private string DeterminarClase(bool esReceso)
    {
        return esReceso ? "btn btn-secondary w-100 h-100" : "btn btn-outline-primary w-100 h-100";
    }

    public class ReportesModel
    {
        public string Grupo { get; set; } = string.Empty;
    }

    private List<string> diasSemana = new() { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes" };

    private List<BloqueHorario> bloquesHorario = new()
    {
        new(new(7, 0, 0), new(7, 40, 0)),
        new(new(7, 40, 0), new(8, 20, 0)),
        new(new(8, 20, 0), new(9, 0, 0)),
        new(new(9, 0, 0), new(9, 20, 0), true), // Receso
        new(new(9, 20, 0), new(10, 0, 0)),
        new(new(10, 0, 0), new(10, 40, 0)),
        new(new(10, 40, 0), new(11, 20, 0)),
        new(new(11, 20, 0), new(12, 0, 0), true), // Almuerzo
        new(new(12, 0, 0), new(12, 40, 0)),
        new(new(12, 40, 0), new(13, 20, 0)),
        new(new(13, 20, 0), new(14, 0, 0)),
        new(new(14, 0, 0), new(14, 20, 0), true), // Receso
        new(new(14, 20, 0), new(15, 0, 0)),
        new(new(15, 0, 0), new(15, 40, 0)),
        new(new(15, 40, 0), new(16, 20, 0))
        };


    private string GetMateriaDelDia(BloqueHorario context, string dia)
    {
        return dia switch
        {
            "Lunes" => context.Lunes ?? (context.EsReceso ? "Receso" : "Sin asignar"),
            "Martes" => context.Martes ?? (context.EsReceso ? "Receso" : "Sin asignar"),
            "Miercoles" => context.Miercoles ?? (context.EsReceso ? "Receso" : "Sin asignar"),
            "Jueves" => context.Jueves ?? (context.EsReceso ? "Receso" : "Sin asignar"),
            "Viernes" => context.Viernes ?? (context.EsReceso ? "Receso" : "Sin asignar"),
            _ => ""
        };
    }

    private string GetColorDelDia(BloqueHorario context, string dia)
    {
        return context.Color ?? "#ffffff";
    }

    public class BloqueHorario
    {
        public int IdHorario { get; set; }
        public TimeSpan HoraInicio { get; set; }
        public TimeSpan HoraFin { get; set; }
        public bool EsReceso { get; set; }
        public string? Lunes { get; set; }
        public string? Martes { get; set; }
        public string? Miercoles { get; set; }
        public string? Jueves { get; set; }
        public string? Viernes { get; set; }
        public string? Color { get; set; }

        public string RangoHorario { get; private set; }

        public BloqueHorario(TimeSpan horaInicio, TimeSpan horaFin, bool esReceso = false)
        {
            HoraInicio = horaInicio;
            HoraFin = horaFin;
            EsReceso = esReceso;
            RangoHorario = $"{DateTime.Today.Add(HoraInicio):hh\\:mm tt} - {DateTime.Today.Add(HoraFin):hh\\:mm tt}";
        }
    }


}

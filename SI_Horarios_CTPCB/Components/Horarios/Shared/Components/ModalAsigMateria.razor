<Modal @ref="modal">
    <ModalContent Centered Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Asignar materia Dia: @Dia y Hora: @Hora</ModalTitle>
            <CloseButton></CloseButton>
        </ModalHeader>
        <ModalBody>
            <LoadingIndicator @bind-Visible="isLoading">
                <ChildContent>
                    <Div Class="col-md-6">
                        <label>Profesor</label>

                        <Select @bind-SelectedValue="reportesModel.Profesor" Class="form-control">
                            <SelectItem Value="@((int?)null)">Seleccione una opción</SelectItem>
                            @foreach (var i in dataProfesor ?? new List<ProfesorDto>())
                            {
                                <SelectItem Value="@(i.Id_Profesor)">@i.Nombre @i.Apellido</SelectItem>
                            }
                        </Select>
                    </Div>
                    <Div Class="form-group mb-3">
                        <label>Materia</label>

                        @* <Select @bind-SelectedValue="reportesModel.Profesor_X_Materia" Class="form-control">
                            <SelectItem Value="@((int?)null)">Seleccione una opción</SelectItem>
                            @foreach (var i in dataProfesor_X_Materia ?? new List<Profesor_X_MateriaDto>())
                            {
                                <SelectItem Value="@(i.Id_Profesor)">@i.Id_Materia </SelectItem>
                            }
                        </Select> *@
                    </Div>
                    <Div Class="form-group mb-3">
                        <label for="leccFaltantes">Lecciones Faltantes</label>
                        <InputText @bind-Value="leccFaltantes" class="form-control" placeholder="Lecciones Faltantes" disabled />
                    </Div>
                </ChildContent>
            </LoadingIndicator>
        </ModalBody>
        <ModalFooter>
            <Button Class="btn btn-create" Clicked="@Guardar">Guardar</Button>
            <Button Class="btn btn-edit" Clicked="@Bloquear">Bloquear</Button>
            <Button Class="btn btn-delete" Clicked="@Hide">Cerrar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private ReportesModel reportesModel { get; set; } = new ReportesModel();

    IEnumerable<ProfesorDto>? dataProfesor { get; set; } = new List<ProfesorDto>();
    IEnumerable<Profesor_X_MateriaDto>? dataProfesor_X_Materia { get; set; } = new List<Profesor_X_MateriaDto>();
    public class ReportesModel
    {
        public int? Profesor { get; set; }
        public int? Profesor_X_Materia { get; set; }
    }

    Modal? modal;

    public bool isLoading { get; set; } = false;
    public string? selectedMateria;
    public string? leccFaltantes;

    [Parameter]
    public string? Dia { get; set; }

    [Parameter]
    public string? Hora { get; set; }

    public Task Hide()
    {
        modal?.Close(CloseReason.UserClosing);
        return Task.CompletedTask;
    }

    public async Task Open(string dia, string hora)
    {
        Dia = dia;
        Hora = hora;
        isLoading = false; 
        modal?.Show(); 
    }

    public Task Guardar()
    {

        modal?.Close(CloseReason.UserClosing);
        return Task.CompletedTask;
    }

    public Task Bloquear()
    {

        modal?.Close(CloseReason.UserClosing);
        return Task.CompletedTask;
    }

    private void SelectedChange(ChangeEventArgs e)
    {
        selectedMateria = e.Value?.ToString() ?? "0";
        if (selectedMateria == "1")
            leccFaltantes = "15";
        else
            leccFaltantes = "3";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var resProfesor = await api.Mantenimientos_GetAllProfesorAsync();
            dataProfesor = resProfesor.Where(x => x.Estado.Equals("A"));
            var resProfesorxmateria = await api.Mantenimientos_GetAllProfesor_X_MateriaAsync();
            dataProfesor = resProfesor.Where(x => x.Estado.Equals("A"));
            StateHasChanged();
        }
        if (firstRender)
        {

            
            StateHasChanged();
        }
    }

}

<Bar Mode="BarMode.VerticalInline"
     Breakpoint="Breakpoint.Desktop"
    CollapseMode="BarCollapseMode.Small"
    ThemeContrast="ThemeContrast.Dark"
     Style="background-color: var(--color-primario) !important; ">
    @*min-width:100%*@

    <BarBrand Style="background-color: var(--primary-banpo) !important; height:auto; width 100%;">
        <BarLink To="MenuPrincipal">
            <Image Margin="Margin.Is2.FromEnd"
            Source="Img/Logos/logo_ctp_plan.png"
            Style="max-width: 100%; height: auto; display: block;" />
        </BarLink>
    </BarBrand>

   @*  <Div Class="text-white text-center px-3 mb-3" style="font-weight: 500; padding-top: 10px;">
        <Icon Name="IconName.User" Class="me-2" />
        @userName
    </Div> *@
    <BarToggler Mode="BarTogglerMode.Popout"  Style="background-color: var(--color-terciario) !important; " />
    <BarMenu TextColor="TextColor.White">
        <BarStart>

            <BarItem>
                <BarLink To="#">
                    <BarIcon IconName="IconName.User" />
                    <b>@userName</b>
                </BarLink>
            </BarItem>

            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>
                        <BarIcon IconName="IconName.Wrench" />
                        <b>Parámetros</b>
                    </BarDropdownToggle>
                    <BarDropdownMenu  Style="background-color: var(--color-primario) !important; "> 
                       
                        @foreach (var option in optionsMantenimiento)
                        {
                            <BarDropdownItem>
                                <BarIcon IconName="@option.Icon" />
                                <a class="text-white text-decoration-none" href="@option.Href">@option.Description</a>
                            </BarDropdownItem>
                        }
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>

            <BarItem>
                <BarLink To="Horarios/GenHorarios">
                    <BarIcon IconName="IconName.Calendar" />
                    <b>Horarios</b>
                </BarLink>
            </BarItem>

            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>
                        <Icon Name="IconName.File" /> <b>Reportes</b>
                       
                    </BarDropdownToggle>
                    <BarDropdownMenu Class="dropdown-expanded p-2" Style="background-color: var(--color-primario) !important; min-width: 240px;">
                        @foreach (var option in optionsReportes)
                        {
                            <BarDropdownItem>
                                <BarIcon IconName="@option.Icon" />
                                <a class="text-white text-decoration-none" href="@option.Href">@option.Description</a>
                            </BarDropdownItem>
                        }
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
            <BarItem>
                <BarLink To="Mantenimientos/Seguridad"  Shadow="Shadow.None">
                    <Icon Name="IconName.Lock" />
                    <b>Seguridad</b>
                </BarLink>
            </BarItem>
        </BarStart>
    </BarMenu>
</Bar>

@code {
    public class Option
    {
        public string? Href { get; set; }
        public string? Description { get; set; }
        public IconName? Icon { get; set; }
    }
    private bool IsCollapsed = false;
      
    private List<Option> optionsMantenimiento = new List<Option>
    {
        new Option { Href = "Mantenimientos/GestionProf", Description = "Gestión de Profesores", Icon = IconName.UserPlus },
        new Option { Href = "Mantenimientos/GestionGrupos", Description = "Gestión de Grupos", Icon = IconName.Users },
        new Option { Href = "Mantenimientos/GestionMaterias", Description = "Gestión Materias", Icon = IconName.Book },
        new Option { Href = "Mantenimientos/GestionNivelAcademico", Description = "Gestión Nivel Academico", Icon = IconName.Book },
        new Option { Href = "Mantenimientos/GestionMateriaXNivel", Description = "Gestión Materias X Nivel Academico", Icon = IconName.Book },
    };

    private List<Option> optionsSeguridad = new List<Option>
    {
        new Option { Href = "Mantenimientos/Seguridad", Description = "Seguridad", Icon = IconName.Lock },
    };

    private List<Option> optionsReportes = new List<Option>
    {
        new Option { Href = "Reportes/ReportesHorarios", Description = "Reporte de Horarios", Icon = IconName.File },
    };

    private List<Option> optionsHorarios = new List<Option>
    {
        new Option { Href = "Horarios/GenHorarios", Description = "Generacion de Horarios", Icon = IconName.Calendar },
    };

    private string? userName;

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userName = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value ?? user.Claims.FirstOrDefault(c => c.Type == "name")?.Value ?? user.Identity?.Name

          ?? "Usuario desconocido";

        }
        else
        {
            userName = "Invitado";
        }
    }

    private void ToggleCollapse()
    {
        IsCollapsed = !IsCollapsed;
    }

    private string GetMenuClass()
    {
        return IsCollapsed ? "small" : ""; 
    }
}
